{"version":3,"sources":["../../src/models/User.js"],"names":["findOne","db","data","Promise","resolve","reject","err","user","save","record","result","update","checkData","updateData","findOneAndUpdate","$set","new","find"],"mappings":";;;;;AAAA,IAAMA,UAAU,SAAVA,OAAU,CAACC,EAAD,EAAKC,IAAL,EAAc;AAC1B,WAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCJ,WAAGD,OAAH,CAAWE,IAAX,EAAiB,UAASI,GAAT,EAAcC,IAAd,EAAoB;AACjC,gBAAID,GAAJ,EAAS;AACLD,uBAAOC,GAAP;AACH,aAFD,MAEO;AACHF,wBAAQG,IAAR;AACH;AACJ,SAND;AAOH,KARM,CAAP;AASH,CAVD;;AAYA,IAAMC,OAAO,SAAPA,IAAO,CAACP,EAAD,EAAKC,IAAL,EAAc;AACvB,QAAIO,SAAS,IAAIR,EAAJ,CAAOC,IAAP,CAAb;AACA,WAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCI,eAAOD,IAAP,CAAY,UAACF,GAAD,EAAMI,MAAN,EAAiB;AACzB,gBAAIJ,GAAJ,EAAS;AACLD,uBAAOC,GAAP;AACH,aAFD,MAEO;AACHF,wBAAQM,MAAR;AACH;AACJ,SAND;AAOH,KARM,CAAP;AASH,CAXD;AAYA,IAAMC,SAAS,SAATA,MAAS,CAACV,EAAD,EAAKW,SAAL,EAAgBC,UAAhB,EAA+B;AAC1C,WAAO,IAAIV,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCJ,WAAGa,gBAAH,CAAoBF,SAApB,EAA+B,EAAEG,MAAMF,UAAR,EAA/B,EAAqD,EAAEG,KAAK,IAAP,EAArD,EAAoE,UAACV,GAAD,EAAMI,MAAN,EAAiB;AACjF,gBAAIJ,GAAJ,EAAS;AACLD,uBAAOC,GAAP;AACH,aAFD,MAEO;AACHF,wBAAQM,MAAR;AACH;AACJ,SAND;AAOH,KARM,CAAP;AASH,CAVD;;AAYA,IAAMO,OAAO,SAAPA,IAAO,CAAChB,EAAD,EAAKC,IAAL,EAAc;AACvB,WAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCJ,WAAGgB,IAAH,CAAQf,IAAR,EAAc,UAASI,GAAT,EAAcC,IAAd,EAAoB;AAC9B,gBAAID,GAAJ,EAAS;AACLD,uBAAOC,GAAP;AACH,aAFD,MAEO;AACHF,wBAAQG,IAAR;AACH;AACJ,SAND;AAOH,KARM,CAAP;AASH,CAVD;;kBAae;AACXP,oBADW;AAEXQ,cAFW;AAGXG,kBAHW;AAIXM;AAJW,C","file":"User.js","sourcesContent":["const findOne = (db, data) => {\n    return new Promise((resolve, reject) => {\n        db.findOne(data, function(err, user) {\n            if (err) {\n                reject(err);\n            } else {\n                resolve(user);\n            }\n        })\n    })\n};\n\nconst save = (db, data) => {\n    let record = new db(data);\n    return new Promise((resolve, reject) => {\n        record.save((err, result) => {\n            if (err) {\n                reject(err);\n            } else {\n                resolve(result)\n            }\n        })\n    })\n};\nconst update = (db, checkData, updateData) => {\n    return new Promise((resolve, reject) => {\n        db.findOneAndUpdate(checkData, { $set: updateData }, { new: true }, (err, result) => {\n            if (err) {\n                reject(err);\n            } else {\n                resolve(result);\n            }\n        })\n    })\n};\n\nconst find = (db, data) => {\n    return new Promise((resolve, reject) => {\n        db.find(data, function(err, user) {\n            if (err) {\n                reject(err);\n            } else {\n                resolve(user);\n            }\n        })\n    })\n};\n\n\nexport default {\n    findOne,\n    save,\n    update,\n    find\n};"]}