{"version":3,"sources":["../../src/providers/UserProvider.js"],"names":["BaseProvider","create","body","Promise","resolve","reject","email","userName","fullName","mobileNumber","profilePicture","password","profession","website","age","bio","checkBlank","arr","req","res","map","val","key","undefined","size","login","model","createHash","update","digest","confirm_password"],"mappings":";;;;;;;;AAAA;;;;AACA;;IAAYA,Y;;AACZ;;;;AACA;;;;;;;;AAEA;AACA,IAAMC,SAAS,SAATA,MAAS,CAACC,IAAD,EAAU;AACrB,WAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,YAAI,CAACH,KAAKI,KAAN,IAAe,CAACJ,KAAKK,QAArB,IAAiC,CAACL,KAAKM,QAAvC,IAAmD,CAACN,KAAKO,YAAzD,IAAyE,CAACP,KAAKQ,cAA/E,IAAiG,CAACR,KAAKS,QAAvG,IAAmH,CAACT,KAAKU,UAAzH,IAAuI,CAACV,KAAKW,OAA7I,IAAwJ,CAACX,KAAKY,GAA9J,IAAqK,CAACZ,KAAKa,GAA/K,EAAoL;AAChLV,mBAAO,oBAAP;AACH,SAFD,MAEO;AACHD,oBAAQF,IAAR;AACH;AACJ,KANM,CAAP;AAOH,CARD;AASA,IAAMc,aAAa,SAAbA,UAAa,CAASC,GAAT,EAAcC,GAAd,EAAmBC,GAAnB,EAAwB;AACvC,WAAO,IAAIhB,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,yBAAEe,GAAF,CAAMH,GAAN,EAAW,UAACI,GAAD,EAAMC,GAAN,EAAc;AACrB,gBAAID,OAAO,EAAP,IAAaA,QAAQ,EAArB,IAA2BA,OAAOE,SAAtC,EAAiD;AAC7ClB,uBAAO,yBAAP;AACH,aAFD,MAEO;AACH,oBAAIiB,OAAQ,iBAAEE,IAAF,CAAOP,GAAP,IAAc,CAA1B,EAA8B;AAC1Bb,4BAAQ,MAAR;AACH;AACJ;AACJ,SARD;AASH,KAVM,CAAP;AAWH,CAZD;;AAcA;AACA,IAAMqB,QAAQ,SAARA,KAAQ,CAACC,KAAD,EAAQxB,IAAR,EAAiB;AAC3B,QAAIS,WAAW,iBAAOgB,UAAP,CAAkB,QAAlB,EAA4BC,MAA5B,CAAmC1B,KAAKS,QAAxC,EAAkDkB,MAAlD,CAAyD,QAAzD,CAAf;AACA,WAAO3B,KAAK4B,gBAAZ;AACA,wBAAY5B,IAAZ,EACO;AACCS;AADD,KADP;AAKH,CARD;;+BAWOX,Y;AACHC,kB;AACAe,0B;AACAS","file":"UserProvider.js","sourcesContent":["import crypto from \"crypto\";\nimport * as BaseProvider from \"./BaseProvider\";\nimport util from \"util\";\nimport _ from \"lodash\";\n\n/* Provider for User Registration */\nconst create = (body) => {\n    return new Promise((resolve, reject) => {\n        if (!body.email || !body.userName || !body.fullName || !body.mobileNumber || !body.profilePicture || !body.password || !body.profession || !body.website || !body.age || !body.bio) {\n            reject('parameters missing');\n        } else {\n            resolve(body);\n        }\n    });\n};\nconst checkBlank = function(arr, req, res) {\n    return new Promise((resolve, reject) => {\n        _.map(arr, (val, key) => {\n            if (val == '' || val === \"\" || val == undefined) {\n                reject('Some parameters missing');\n            } else {\n                if (key == (_.size(arr) - 1)) {\n                    resolve('done');\n                }\n            }\n        })\n    })\n};\n\n/* Provider for User login */\nconst login = (model, body) => {\n    let password = crypto.createHash(\"sha256\").update(body.password).digest(\"base64\");\n    delete body.confirm_password;\n    return { ...body,\n        ...{\n            password\n        }\n    };\n};\n\nexport default {\n    ...BaseProvider,\n    create,\n    checkBlank,\n    login,\n};"]}