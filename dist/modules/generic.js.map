{"version":3,"sources":["../../src/modules/generic.js"],"names":["serverError","response","message","validateEmail","email","re","test","checkBlank","arr","map","val","key","undefined","size","mergeArray","arr1","arr2","keyBy","merge","values","value","countryCode","country_code","includes","generateRandomString","Math","floor","random","successResult","flag","invalidToken","parameterMissing","verifyData","data","result","count","length","isInteger","validate","resp","status","encodePassword","password","md5","createHash","update","pass_md5","digest","encodeEmail","createUniqueId","start","id","toString","timeStamp","round","Date","getTime","module","exports"],"mappings":"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","file":"generic.js","sourcesContent":["import _ from 'lodash';\nimport { BAD_REQUEST_MESSAGE, SUCCESS_MESSAGE, INVALID_ACCESS_TOKEN_MESSAGE, PARAMETER_MISSING_MESSAGE } from '../constant/message';\nimport crypto from 'crypto';\nimport { ObjectID } from 'bson';\n\nconst serverError = (response = {}, message = BAD_REQUEST_MESSAGE) => {\n    if (typeof message == 'string') {\n        message = { message }\n    }\n    return ({\n        response,\n        message\n    })\n};\nconst validateEmail = (email) => {\n    var re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return re.test(email);\n}\n\nconst checkBlank = (arr) => {\n    _.map(arr, (val, key) => {\n        if (val == '' || val === \"\" || val == undefined) {\n            return ('Some parameters missing');\n        } else {\n            if (key == (_.size(arr) - 1)) {\n                return (null, 'done');\n            }\n        }\n    })\n};\n\nconst mergeArray = (arr1 = [], arr2 = []) => {\n    return _(arr1).keyBy('id').merge(_.keyBy(arr2, 'id')).values().value();\n}\n\nconst countryCode = (country_code) => {\n    if (!country_code.includes(\"+\")) {\n        country_code = '+' + country_code\n    };\n    return country_code;\n}\n\nconst generateRandomString = () => {\n    return Math.floor(1000 + Math.random() * 9000);\n}\n\n\nconst successResult = (response = '{}', message = SUCCESS_MESSAGE, flag = 1) => {\n    if (typeof message == 'string') {\n        message = { message }\n    }\n    return ({\n        response,\n        message,\n        flag\n    });\n}\n\nconst invalidToken = (message = INVALID_ACCESS_TOKEN_MESSAGE, response = {}) => {\n    return ({\n        response,\n        message\n    })\n};\n\nconst parameterMissing = (message = PARAMETER_MISSING_MESSAGE, response = {}) => {\n    if (typeof message == 'string') {\n        message = { message }\n    }\n    return ({\n        response,\n        message\n    })\n};\n\n// verify the key's and return only those key's which have value\nconst verifyData = (data = {}) => {\n    var result = {};\n    var count = 0;\n    _.map(data, (val, key) => {\n        if (val && val.length || _.isInteger(val)) {\n            result[key] = val;\n        }\n    })\n    return result;\n}\n\n// validate the key's and return the missing keys otherwise return the valid json\nconst validate = (data = {}) => {\n    var result = {};\n    var resp = {};\n    var count = 0;\n    _.map(data, (val, key) => {\n        if (val && val.length || _.isInteger(val)) {\n            if (key == 'email') {\n                if (!validateEmail(val)) {\n                    resp[key] = `invalid  ${key}`;\n                }\n            }\n            result[key] = val;\n        } else {\n            resp[key] = `${key} is missing`;\n        }\n    })\n    if (resp && _.size(resp)) {\n        return { status: false, data: resp };\n    } else {\n        return { status: true, data: result };\n    }\n}\n\nconst encodePassword = (password = '') => {\n    let md5 = crypto.createHash('md5');\n    md5.update(password);\n    let pass_md5 = md5.digest('hex');\n    return pass_md5;\n}\n\nconst encodeEmail = (email = '') => {\n    return crypto.createHash('md5').update(email).digest(\"hex\")\n}\n\n/*create unique id*/\nconst createUniqueId = (start = '') => {\n    const id = new ObjectID();\n    return `${start}_${id.toString()}`;\n}\n\nconst timeStamp = () => {\n    return Math.round(new Date().getTime() / 1000);\n}\n\nmodule.exports = {\n    serverError,\n    validateEmail,\n    checkBlank,\n    mergeArray,\n    countryCode,\n    generateRandomString,\n    successResult,\n    invalidToken,\n    parameterMissing,\n    verifyData,\n    validate,\n    encodePassword,\n    createUniqueId,\n    timeStamp,\n    encodeEmail\n};"]}