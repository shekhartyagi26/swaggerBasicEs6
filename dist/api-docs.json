{
  "swagger": "2.0",
  "info": {
    "title": "UCME API spec",
    "description": "UCME API spec for Swagger",
    "version": "1.0.0"
  },
  "host": "ucme-backend.eu-gb.mybluemix.net",
  "schemes": [
    "http"
  ],
  "securityDefinitions": {
    "basicAuth": {
      "type": "basic",
      "description": "Uses HTTP Basic Authentication."
    }
  },

  "security": [
    {
      "basicAuth": []
    }
  ],
  "basePath": "/",
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/users": {
      "get": {
        "summary": "get all UCME users",
        "description": "This endpoint returns all users (not deactivated) of UCME.\nWe also can filter users by condition given in query like ?email=abc@def.com.\n",
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/User"
          }
        }
      },
      "post": {
        "summary": "create new UCME user",
        "description": "Create new user.\n Use 'registerCode' only for invitation.\n Do not use 'registerCode' for normal user registration. ",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "request body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateNewUser"
            }
          }
        ],
        "tags": [
          "Users"
        ],
        "responses": {
          "201": {
            "description": "New user created successfully",
            "schema": {
              "type": "object",
              "properties": {
                "userId": {
                  "$ref": "#/definitions/UserId"
                },
                "age": {
                  "type": "integer",
                  "format": "int32",
                  "example": 28,
                  "description": "user's age"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body"
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/users/constants": {
      "get": {
        "summary": "get user related constants",
        "description": "This endpoint returns all constants from backend related to user.",
        "responses": {
          "200": {
            "description": "Returns user constants",
            "schema": {
              "type": "object",
              "properties": {
                "DefaultNewUserCashPoints":{
                  "type": "integer",
                  "example": 50,
                  "description": "no of default new user Cash points"
                },
                "DefaultNewUserGamePoints":{
                  "type": "integer",
                  "example": 100,
                  "description": "no of default new user Game points"
                },
                "DefaultNewUserStars":{
                  "type": "integer",
                  "example": 5,
                  "description": "no of default new user star"
                },
                "UCME_ExchangeRate_Points": {
                  "$ref": "#/definitions/UCME_ExchangeRate_Points"
                },
                "UCME_Points_Transfer_Quota": {
                  "$ref": "#/definitions/UCME_Points_Transfer_Quota"
                }
              }
            }
          },
          "500": {
            "description": "Some error while fetching user constants",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/users/{userId}": {
      "get": {
        "summary": "get one UCME user",
        "description": "This endpoint returns one user of UCME.\n",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "user id.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/User"
          },
          "404": {
            "description": "Not found"
          }
        }
      },
      "put": {
        "summary": "update one UCME user",
        "description": "Update one user specified by user id.\n",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "user id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "updatedUser",
            "in": "body",
            "description": "updated user.",
            "schema": {
              "$ref": "#/definitions/NewUser"
            }
          }
        ],
        "tags": [
          "Users"
        ],
        "responses": {
          "204": {
            "description": "A user is successfully updated."
          },
          "400": {
            "description": "Invalid request body"
          },
          "404": {
            "description": "Not found"
          }
        }
      },
      "delete": {
        "summary": "permanently delete a UCME user",
        "description": "WARNING - This method world permanently delete a user.\nStrictly for dev puposes.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "user id.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Users"
        ],
        "responses": {
          "204": {
            "description": "A user is successfully deleted."
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/users/{userId}/deactivate": {
      "delete": {
        "summary": "deactivate one UCME user",
        "description": "Deactivate one user specified by user id.\n",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "user id.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Users"
        ],
        "responses": {
          "204": {
            "description": "A user is successfully deactivate."
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/users/getAllNearByExperiences/{userId}/{latitude}/{longitude}": {
      "get": {
        "summary": "get user location ,nearest VM ,UserId",
        "description": "get all nearest user , UserLocation, nearest virtual message with in range of 0.01 mile.\n",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Latitude",
            "required": true,
            "type": "string"
          },
          {
            "name": "latitude",
            "in": "path",
            "description": "Latitude",
            "required": true,
            "type": "number"
          },
          {
            "name": "Longitude",
            "in": "path",
            "description": "longitude",
            "required": true,
            "type": "number"
          },
          {
            "name": "maxDist",
            "in": "query",
            "description": "maximum Distance",
            "required": false,
            "type": "number"
          },
          {
            "name": "unit",
            "in": "query",
            "description": "unit by default mi",
            "required": false,
            "type": "string"
          },
          {
            "name": "filterType",
            "in": "query",
            "description": "type of filter like category ,date. if filterType:date use to and from otherwise use filterType and filterValue",
            "required": false,
            "type": "string"
          },
          {
            "name": "filterValue",
            "in": "query",
            "description": "value of filter like for category value will be Advocacy,date (for filterValue :date ,use to and from)",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "from date, example: 6/1/2017 (M/D/YYYY),use for date filter only",
            "required": false,
            "type": "string"
          },
          {
            "name": "to",
            "in": "query",
            "description": "to date , example: 8/5/2017  (M/D/YYYY),use for date filter only",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Users"
        ],
        "responses": {
          "204": {
            "description": "get  user location , UserId , nearest virtual messages ,memories,successfully."
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/users/MyNearbyVirtualExp/{userId}/{latitude}/{longitude}": {
      "get": {
        "summary": "will fetch all Virtual Experiences I have published at specific location",
        "description": "will fetch all Virtual Experiences I have published at specific location.\n",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "type": "string"
          },
          {
            "name": "latitude",
            "in": "query",
            "description": "latitude",
            "required": false,
            "type": "number"
          },
          {
            "name": "longitude",
            "in": "query",
            "description": "longitude",
            "required": false,
            "type": "number"
          },
          {
            "name": "maxDist",
            "in": "query",
            "description": "maximum Distance",
            "required": false,
            "type": "number"
          },
          {
            "name": "unit",
            "in": "query",
            "description": "unit by default mi",
            "required": false,
            "type": "string"
          },
          {
            "name": "filterType",
            "in": "query",
            "description": "type of filter like category ,date. if filterType:date use to and from otherwise use filterType and filterValue",
            "required": false,
            "type": "string"
          },
          {
            "name": "filterValue",
            "in": "query",
            "description": "value of filter like for category value will be Advocacy, date (for filterValue :date ,use to and from)",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "from Date, example: 6/1/2017 (M/D/YYYY),use for date filter only",
            "required": false,
            "type": "string"
          },
          {
            "name": "to",
            "in": "query",
            "description": "to Date , example: 8/5/2017  (M/D/YYYY),use for date filter only",
            "required": false,
            "type": "string"
          }

        ],
        "tags": [
          "Users"
        ],
        "responses": {
          "204": {
            "description": "will fetch all Virtual Experiences I have published at specific location."
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/users/{userId}/profile_pic": {
      "get": {
        "summary": "get profile pic",
        "description": "This endpoint returns profile pic of user.\n",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "user id.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "User Profile"
        ],
        "responses": {
          "200": {
            "description": "get user Image",
            "schema": {
              "$ref": "#/definitions/UserImage"
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/users/{userId}/profile_pic_update": {
      "put": {
        "summary": "update user profile pic",
        "description": "Update user profile pic specified by user id.\n",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "user id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "updatedUser",
            "in": "body",
            "description": "updated user.",
            "schema": {
              "$ref": "#/definitions/NewUserProfile"
            }
          }
        ],
        "tags": [
          "User Profile"
        ],
        "responses": {
          "200": {
            "description": "A user profile pic is successfully updated."
          },
          "400": {
            "description": "Invalid request body"
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/users/{userId}/points": {
      "get": {
        "summary": "get points of certain User",
        "description": "This endpoint returns points of user.\n",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "user's id.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "User Point"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UserPoint"
          }
        }
      },
      "post": {
        "summary": "Add/Update points of certain user",
        "description": "This endpoint updates the points of user.\n",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "user's id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "request body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserPointPost"
            }
          }
        ],
        "tags": [
          "User Point"
        ],
        "responses": {
          "200": {
            "description": "User points updated successfully",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Newly created item's id"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/stars": {
      "get": {
        "summary": "get stars of certain User",
        "description": "This endpoint returns stars of user.\n",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "user's id.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "User Star"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UserStar"
          }
        }
      },
      "post": {
        "summary": "Add/Update stars of certain user",
        "description": "This endpoint updates the stars of user.\n",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "user's id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "request body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserStarsPost"
            }
          }
        ],
        "tags": [
          "User Star"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UserStar"
          }
        }
      }
    },
    "/users/{userId}/tracking_users": {
      "get": {
        "summary": "get all tracking users",
        "description": "This endpoint returns users whom user is tracking.\n",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "user's id.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "User Track"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UserTrack"
          }
        }
      }
    },
    "/users/{userId}/location": {
      "get": {
        "summary": "get location of certain User",
        "description": "This endpoint returns the location of user.\n",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "user's id.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "User Location"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UserLocation"
          }
        }
      },
      "put": {
        "summary": "update location of certain User",
        "description": "This endpoint update the location of user.\n",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "user's id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "gps",
            "in": "body",
            "description": "new GPS of user.",
            "schema": {
              "$ref": "#/definitions/CoordinatesObject"
            }
          }
        ],
        "tags": [
          "User Location"
        ],
        "responses": {
          "204": {
            "description": "A user is successfully updated."
          },
          "400": {
            "description": "Invalid request body."
          }
        }
      }
    },
    "/users/{userId}/near": {
      "get": {
        "summary": "get near users of certain User",
        "description": "This endpoint returns near users.\n",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "user's id.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "User Near"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UserNear"
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/users/{userId}/stores": {
      "get": {
        "summary": "get user stored items",
        "description": "This endpoint returns user stored items.\n",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "user's id.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "User Store"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UserStore"
          },
          "404": {
            "description": "Not found"
          }
        }
      },
      "post": {
        "summary": "register new user store item",
        "description": "Register new user store item.\n",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "user's id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "request body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserStore"
            }
          }
        ],
        "tags": [
          "User Store"
        ],
        "responses": {
          "201": {
            "description": "New item was stored successfully",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Newly created item's id"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/stores/{storeId}": {
      "delete": {
        "summary": "delete one ARO Animal",
        "description": "Delete ARO Animal specified by id.\n",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "user id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "storeId",
            "in": "path",
            "description": "stored item id.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "User Store"
        ],
        "responses": {
          "204": {
            "description": "Stored item was successfully deleted."
          }
        }
      }
    },
    "/users/{userId}/requests": {
      "get": {
        "summary": "get all requests for the user",
        "description": "This endpoint returns all requests sent for the user.\nRequests are generated by Interactions automatically\n",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "user's id.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "User Requests"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UserRequest"
          }
        }
      }
    },
    "/users/{userId}/isGAIA": {
      "get": {
        "summary": "get isGAIA status of certain User",
        "description": "This endpoint returns isGAIA status of user.\n",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "user's id.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "User isGAIA status"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UserIsGAIA"
          }
        }
      }
    },
    "/poi": {
      "get": {
        "summary": "get all POIs",
        "description": "This endpoint returns all POIs.\n",
        "parameters": [
          {
            "name": "any condition to filter POIs",
            "in": "query",
            "description": "userId | userStoreId",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "POI"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/POI"
          }
        }
      },
      "post": {
        "summary": "create new POI",
        "description": "Create new POI.\n",
        "parameters": [
          {
            "name": "newPOI",
            "in": "body",
            "description": "request body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/POI"
            }
          }
        ],
        "tags": [
          "POI"
        ],
        "responses": {
          "201": {
            "description": "New POI was created successfully",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "$ref": "#/definitions/POIId"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body"
          }
        }
      }
    },
    "/poi/{id}": {
      "delete": {
        "summary": "delete POI",
        "description": "Delete POI specified by user id.\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "POI id.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "POI"
        ],
        "responses": {
          "204": {
            "description": "A POI is successfully deleted."
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/aro_list": {
      "get": {
        "summary": "get list of all ARO's",
        "description": "This endpoint returns list of all ARO's.\n",
        "parameters": [
          {
            "name": "any property user has",
            "in": "query",
            "description": "any property.",
            "required": false,
            "type": "string",
            "format": "double"
          }
        ],
        "tags": [
          "ARO List"
        ],
        "responses": {
          "200": {
            "description": "An object of ARO animals",
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/AROList"
              }
            }
          }
        }
      },
      "post": {
        "summary": "User attached to ARO",
        "description": "User attached to ARO.\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "request body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AROUserSave"
            }
          }
        ],
        "tags": [
          "ARO List"
        ],
        "responses": {
          "201": {
            "description": "User attached to ARO",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "User ARO's id"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update points of an ARO or feed ARO",
        "description": "Update points of an ARO.\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "request body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateAROPoints"
            }
          }
        ],
        "tags": [
          "User Point"
        ],
        "responses": {
          "201": {
            "description": "Update points of an ARO",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Update points of an ARO"
                }
              }
            }
          }
        }
      }
    },
    "/aro_list/AROdefaultValue": {
      "get": {
        "summary": "get aro default values and status",
        "description": "get aro default values and status.\n",
        "tags": [
          "ARO List"
        ],
        "responses": {
          "204": {
            "description": "get aro default values and status."
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/aro_list/getUserARO/{UserAroId}": {
      "get": {
        "summary": "get status and points of an user's ARO",
        "description": "get status and points of an user's ARO by UserAroId.\n",
        "parameters": [
          {
            "name": "UserAroId",
            "in": "path",
            "description": "User's AroId",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "User Point"
        ],
        "responses": {
          "204": {
            "description": "get status and points of an user's ARO successfully."
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/aro_list/AROsUserList": {
      "get": {
        "summary": "get All ARO user's",
        "description": "get All ARO user's.\n",
         "parameters": [
          {
            "name": "userId",
            "in": "query",
            "description": "get all the ARO's attached to all user and if the userid is sent in the request parameters, then will get ARO's attached to a single user.",
            "required": false,
            "type": "string",
            "format": "double"
          }
        ],
        "tags": [
          "ARO List"
        ],
        "responses": {
          "204": {
            "description": "get All ARO user's successfully."
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/aro_list/ActivateARO/{UserAroId}": {
      "put": {
        "summary": "update User's ARO to active or inactive",
        "description": "update User's ARO to active or inactive.\n",
        "parameters": [
          {
            "name": "UserAroId",
            "in": "path",
            "description": "User's UserAroId",
            "required": true,
            "type": "string"
          },
          {
            "name": "active",
            "in": "query",
            "description": "ARO status : true / false",
            "required": true,
            "type": "boolean"
          }
        ],
        "tags": [
          "ARO List"
        ],
        "responses": {
          "204": {
            "description": "change ARO status successfully."
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/aro_list/aroActive/{aroId}": {
      "put": {
        "summary": "active or inactive ARO in AROStore",
        "description": "update aro status ,active or inactive ARO in AROStore.\n",
        "parameters": [
          {
            "name": "aroId",
            "in": "path",
            "description": "aroId",
            "required": true,
            "type": "string"
          },
          {
            "name": "isActiveInAROStore",
            "in": "query",
            "description": "change the status active or inactive",
            "required": true,
            "type": "boolean"
          }
        ],
        "tags": [
          "ARO List"
        ],
        "responses": {
          "204": {
            "description": "active or inactive ARO in AROStore successfully."
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/categories": {
      "get": {
        "summary": "get categories",
        "description": "This endpoint returns all categories.\n",
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "description": "type can be VM, POI, MEMORY etc",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns list of categories"
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          },
          "500": {
            "description": "Some internal server error",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          }
        },
        "tags": [
          "Categories"
        ]
      }
    },
    "/memories": {
      "get": {
        "summary": "RESTRICTED TO BE USED BY DEVs ONLY get all memorys",
        "description": "This endpoint returns all memorys of user.\nWe also can filter users by condition given in query.\n",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "description": "mem sender user Id.",
            "required": false,
            "type": "string"
          },
          {
            "name": "audienceType",
            "in": "query",
            "description": "audienceType, Public, Individual, Followers.",
            "required": false,
            "type": "string"
          },
          {
            "name": "messageType",
            "in": "query",
            "description": "messageType - Text or Video.",
            "required": false,
            "type": "string"
          },
          {
            "name": "category",
            "in": "query",
            "description": "category - see mem categories.",
            "required": false,
            "type": "string"
          },
          {
            "name": "hasExpired",
            "in": "query",
            "description": "whether message has Expired",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "isFavourite",
            "in": "query",
            "description": "whether message is selected as user favourite",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "remoteRead",
            "in": "query",
            "description": "whether message can be remote read",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "allowAutoGrab",
            "in": "query",
            "description": "whether message can be auto grabbed",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns list of memorys",
            "schema": {
              "$ref": "#/definitions/Memory"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          },
          "500": {
            "description": "Returns 0 count if no memorys found",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          }
        },
        "tags": [
          "Memory"
        ]
      },
      "post": {
        "summary": "create new memorys",
        "description": "pass one or mutiple payloads to create new memorys.",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Object that will save Memory",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NewMemory"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Newly added memory",
            "schema": {
              "type": "object",
              "properties": {
                "memoryId": {
                  "type": "string",
                  "description": "Newly created memoryId or mem ids in case of multi insert",
                  "example": "MEM-65f3c352-86d8-4bc3-a507-022ebd3fdc79"
                }
              }
            }
          },
          "400": {
            "description": "Invalid payload data",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          }
        },
        "tags": [
          "Memory"
        ]
      }
    },
    "/memories/constants": {
      "get": {
        "summary": "get mem realated constants",
        "description": "This endpoint returns all constants from backend relaetd to MEM.\n Like Audio video duration, message text limit, distances limit etc",
        "responses": {
          "200": {
            "description": "Returns memory constants",
            "schema": {
              "type": "object",
              "properties": {
                "DistanceRange": {
                  "type": "object",
                  "properties": {
                    "distance": {
                      "type": "integer",
                      "description": "distance in miles"
                    }
                  }
                },
                "VideoDurations": {
                  "type": "object",
                  "properties": {
                    "seconds": {
                      "type": "integer",
                      "description": "duration in seconds"
                    },
                    "points": {
                      "type": "integer",
                      "description": "points to deduct"
                    }
                  }
                },
                "AudioDurations": {
                  "type": "object",
                  "properties": {
                    "seconds": {
                      "type": "integer",
                      "description": "duration in seconds"
                    },
                    "points": {
                      "type": "integer",
                      "description": "points to deduct"
                    }
                  }
                },
                "TextLimit": {
                  "type": "object",
                  "properties": {
                    "chars": {
                      "type": "integer",
                      "description": "no of characters"
                    },
                    "points": {
                      "type": "integer",
                      "description": "points to deduct"
                    }
                  }
                },
                "DefaultMonthlyFreeMessageQuotaLimit": {
                  "type": "integer",
                  "description": "no of default free messages per month"
                },
                "DefaultMonthlyFreeRemoteLimit": {
                  "type": "integer",
                  "description": "no of default free messages remote allowed without physically be preset at location per month"
                },
                "DefaultUserPointsToSendMEM": {
                  "type": "integer",
                  "description": "no of default points to deduct on every message that exceeds monthly limit"
                },
                "DefaultMinDistanceRangeForMEM": {
                  "type": "integer",
                  "description": "default distance range"
                },
                "DefaultDurationForVideoMEM": {
                  "type": "integer",
                  "description": "default duration of free video messages"
                },
                "DefaultDaysNoActivity": {
                  "type": "integer",
                  "description": "no activity default days"
                },
                "PictureLengths": {
                  "type": "object",
                  "properties": {
                    "photo": {
                      "type": "integer",
                      "description": "photo length"
                    },
                    "points": {
                      "type": "integer",
                      "description": "points to deduct"
                    }
                  }
                },
                "PictureLengthsCount": {
                  "type": "integer",
                  "description": "count of picture length"
                },
                "DefaultCategory": {
                  "type": "string",
                  "description": "default category"
                }
              }
            }
          },
          "500": {
            "description": "Some error while fetching memorys constants",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          }
        },
        "tags": [
          "Memory"
        ]
      }
    },
    "/memories/{memoryId}": {
      "get": {
        "summary": "get one memorys by id",
        "description": "This endpoint returns one mem by id.\n",
        "parameters": [
          {
            "name": "memoryId",
            "in": "path",
            "description": "mem id.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns list of memorys",
            "schema": {
              "$ref": "#/definitions/Memory"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          },
          "500": {
            "description": "no memorys found",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          }
        },
        "tags": [
          "Memory"
        ]
      },
      "put": {
        "summary": "update one memory",
        "description": "Update one memory by id.\n",
        "parameters": [
          {
            "name": "memoryId",
            "in": "path",
            "description": "user id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "updated user.",
            "schema": {
              "$ref": "#/definitions/Memory"
            }
          }
        ],
        "tags": [
          "Memory"
        ],
        "responses": {
          "204": {
            "description": "memory successfully updated."
          },
          "400": {
            "description": "request body is insufficient",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          },
          "500": {
            "description": "Some error while updating memorys.",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          }
        }
      },
      "delete": {
        "summary": "RESTRICTED TO BE USED BY DEVs ONLY delete one memory",
        "description": "Delete one memory by id.\n",
        "parameters": [
          {
            "name": "memoryId",
            "in": "path",
            "description": "memory id.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Memory"
        ],
        "responses": {
          "204": {
            "description": "memory successfully deleted."
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          },
          "500": {
            "description": "Some error while deleting memory.",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          }
        }
      }
    },
    "/memories/user/{userId}": {
      "get": {
        "summary": "get list of memorys for userId",
        "description": "This endpoint returns vm's by userId.\n",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "user id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "isFavourite",
            "in": "query",
            "description": "user's favourite vm.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns list of memorys",
            "schema": {
              "$ref": "#/definitions/Memory"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          },
          "500": {
            "description": "no memorys found",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          }
        },
        "tags": [
          "Memory"
        ]
      },
      "delete": {
        "summary": "RESTRICTED TO BE USED BY DEVs ONLY delete user's memory",
        "description": "Delete all memory by user id.\n",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "user id.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Memory"
        ],
        "responses": {
          "204": {
            "description": "User's memorys have been successfully deleted."
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          },
          "500": {
            "description": "Some error while deleting user's memorys.",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          }
        }
      }
    },
    "/memories/quota/{userId}": {
      "get": {
        "summary": "get quota details for userId",
        "description": "This endpoint returns vm's send and isUnderFree quota by userId.\n",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "user id.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns quota details",
            "schema": {
              "type": "object",
              "properties": {
                "isUnderFreeQuota": {
                  "type": "boolean",
                  "description": "This user has send mem under free quota limit"
                },
                "usedMessagesCount": {
                  "type": "number",
                  "format": "int32",
                  "description": "no of messages already sent"
                },
                "defaultMonthlyFreeQuotaLimit": {
                  "type": "number",
                  "format": "int32",
                  "example": 15,
                  "description": "This user has send mem under free quota limit"
                }
              }
            }
          },
          "500": {
            "description": "some error occured",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          }
        },
        "tags": [
          "Memory"
        ]
      }
    },
    "/memories/tags/{memoryId}": {
      "get": {
        "summary": "get memorys tags only in string one line",
        "description": "memory tags.",
        "parameters": [
          {
            "name": "memoryId",
            "in": "path",
            "description": "memoryId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "memory tags, comma seprated"
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          }
        },
        "tags": [
          "Memory"
        ]
      },
      "put": {
        "summary": "update memorys tags",
        "description": "updates and appends to any previous memory tags.",
        "parameters": [
          {
            "name": "memoryId",
            "in": "path",
            "description": "memoryId",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "category tags.",
            "schema": {
              "type": "object",
              "properties": {
                "tags": {
                  "type": "string",
                  "description": "comma seperated tags"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "updated memory tags"
          },
          "400": {
            "description": "Invalid payload data",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          }
        },
        "tags": [
          "Memory"
        ]
      }
    },
    "/memories/audience/{userId}": {
      "get": {
        "summary": "get user mem for target audience",
        "description": "Lists all Virtual Messages within the default distance range that are visible to particular user.\n",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "user id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "audienceType",
            "in": "query",
            "description": "audienceType, Public, Individual, Followers.",
            "required": true,
            "type": "string"
          },
          {
            "name": "messageType",
            "in": "query",
            "description": "messageType - Text or Video.",
            "required": true,
            "type": "string"
          },
          {
            "name": "category",
            "in": "query",
            "description": "category - see mem categories.",
            "required": true,
            "type": "string"
          },
          {
            "name": "remoteRead",
            "in": "query",
            "description": "whether message can be remote read",
            "required": true,
            "type": "boolean"
          },
          {
            "name": "long",
            "in": "query",
            "description": "user location longitude.",
            "required": false,
            "type": "string"
          },
          {
            "name": "lat",
            "in": "query",
            "description": "user location latitude.",
            "required": false,
            "type": "string"
          },
          {
            "name": "distance",
            "in": "query",
            "description": "user selected distance range.",
            "required": false,
            "type": "string"
          },
          {
            "name": "unit",
            "in": "query",
            "description": "Unit of distance.",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Memory"
        ],
        "responses": {
          "200": {
            "description": "Returns list of user memorys within range",
            "schema": {
              "$ref": "#/definitions/Memory"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          },
          "500": {
            "description": "no memorys found.",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          }
        }
      }
    },
    "/memories/detail/{memoryId}": {
      "post": {
        "summary": "save mem Detail - see sample",
        "description": "Save Virtual Messages Details.\n",
        "parameters": [
          {
            "name": "memoryId",
            "in": "path",
            "description": "mem id.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Object that will save Memory",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Memory"
            }
          }
        ],
        "tags": [
          "Virtual Messages Details"
        ],
        "responses": {
          "201": {
            "description": "memorys detail id",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Newly created mem Detail's id"
                }
              }
            }
          },
          "400": {
            "description": "invalid mem detail payload.",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          }
        }
      }
    },
    "/memories/detail/{memDetiailsId}": {
      "get": {
        "summary": "get mem Detail - by unique mem detail id",
        "description": "Lists Virtual Messages Details by unique id.\n",
        "parameters": [
          {
            "name": "memDetiailsId",
            "in": "path",
            "description": "unique memory detail id.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Virtual Messages Details"
        ],
        "responses": {
          "200": {
            "description": "Returns memorys detail object",
            "schema": {
              "$ref": "#/definitions/VirtualMessageDetails"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          },
          "500": {
            "description": "no memorys found.",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          }
        }
      },
      "put": {
        "summary": "update memory detail - by mem detail Id",
        "description": "Update detail this will be used to add comments, likes etc.\n",
        "parameters": [
          {
            "name": "memDetiailsId",
            "in": "path",
            "description": "memory detail id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "mem details.",
            "schema": {
              "$ref": "#/definitions/VirtualMessageDetails"
            }
          }
        ],
        "tags": [
          "Virtual Messages Details"
        ],
        "responses": {
          "204": {
            "description": "mem details successfully updated."
          },
          "400": {
            "description": "request body is insufficient",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          },
          "500": {
            "description": "Some error while updating mem details.",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          }
        }
      }
    },
    "/memories/detail/list/{memoryId}": {
      "get": {
        "summary": "get mem Details list - by memoryId",
        "description": "Lists given Virtual Messages Details like comments likes etc.\n",
        "parameters": [
          {
            "name": "memoryId",
            "in": "path",
            "description": "memory id.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Virtual Messages Details"
        ],
        "responses": {
          "200": {
            "description": "Returns memorys details list",
            "schema": {
              "$ref": "#/definitions/VirtualMessageDetails"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          },
          "500": {
            "description": "no memorys found.",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          }
        }
      }
    },
    "/memories/detail/count/{memoryId}": {
      "get": {
        "summary": "get mem Details counts - by memoryId",
        "description": "Lists given Virtual Messages Details Counts like comments likes etc.\n",
        "parameters": [
          {
            "name": "memoryId",
            "in": "path",
            "description": "memory id  -- memoryId.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Virtual Messages Details"
        ],
        "responses": {
          "200": {
            "description": "Returns memorys details Count",
            "schema": {
              "$ref": "#/definitions/VirtualMessageDetailsCount"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          },
          "500": {
            "description": "no memorys found.",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          }
        }
      }
    },
    "/memories/detail/{memDetiailsId}/comment": {
      "post": {
        "summary": "insert comment - by mem detail Id",
        "description": "Add comments.\n",
        "parameters": [
          {
            "name": "memDetiailsId",
            "in": "path",
            "description": "memory detail id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "mem details.",
            "schema": {
              "type": "object",
              "properties": {
                "memoryId": {
                  "type": "string",
                  "description": "memoryId on which reply to be added"
                },
                "userId": {
                  "type": "string",
                  "description": "user Id who comments"
                },
                "replyId": {
                  "type": "string",
                  "description": "memory detail id that is replied on"
                },
                "comment": {
                  "type": "string",
                  "description": "comment message"
                }
              }
            }
          }
        ],
        "tags": [
          "Virtual Messages Details"
        ],
        "responses": {
          "201": {
            "description": "comment added successfully."
          },
          "400": {
            "description": "request body is insufficient",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          }
        }
      }
    },
    "/memories/detail/{memDetiailsId}/like": {
      "put": {
        "summary": "like unlike a mem - by mem detail Id",
        "description": "Update like.\n",
        "parameters": [
          {
            "name": "memDetiailsId",
            "in": "path",
            "description": "memory detail id.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Virtual Messages Details"
        ],
        "responses": {
          "204": {
            "description": "mem details successfully updated."
          },
          "400": {
            "description": "request body is insufficient",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          },
          "500": {
            "description": "Some error while updating mem details.",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          }
        }
      }
    },
    "/memories/detail/{memDetiailsId}/unlike": {
      "put": {
        "summary": "dislike a mem - by mem detail Id",
        "description": "Dislike MEM.\n",
        "parameters": [
          {
            "name": "memDetiailsId",
            "in": "path",
            "description": "memory detail id.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Virtual Messages Details"
        ],
        "responses": {
          "204": {
            "description": "mem details successfully updated."
          },
          "400": {
            "description": "request body is insufficient",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          },
          "500": {
            "description": "Some error while updating mem details.",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          }
        }
      }
    },
    "/memories/detail/{memDetiailsId}/report": {
      "put": {
        "summary": "report abuse on a comment - by mem detail Id",
        "description": "add report abuse on a comment.\n",
        "parameters": [
          {
            "name": "memDetiailsId",
            "in": "path",
            "description": "memory detail id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "userId": {
                  "type": "string",
                  "description": "user Id who reports"
                }
              }
            }
          }
        ],
        "tags": [
          "Virtual Messages Details"
        ],
        "responses": {
          "204": {
            "description": "mem details successfully updated."
          },
          "400": {
            "description": "request body is insufficient",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          },
          "500": {
            "description": "Some error while updating mem details.",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          }
        }
      }
    },
    "/memories/detail/{memDetiailsId}/like-comment": {
      "put": {
        "summary": "like a mem comment - by mem detail Id",
        "description": "Update like.\n",
        "parameters": [
          {
            "name": "memDetiailsId",
            "in": "path",
            "description": "memory detail id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "mem details.",
            "schema": {
              "type": "object",
              "properties": {
                "userId": {
                  "type": "string",
                  "description": "user Id who likes comment"
                }
              }
            }
          }
        ],
        "tags": [
          "Virtual Messages Details"
        ],
        "responses": {
          "204": {
            "description": "mem details successfully updated."
          },
          "400": {
            "description": "request body is insufficient",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          },
          "500": {
            "description": "Some error while updating mem details.",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          }
        }
      }
    },
    "/memories/detail/{memDetiailsId}/unlike-comment": {
      "put": {
        "summary": "dislike a mem comment - by mem detail Id",
        "description": "Update like.\n",
        "parameters": [
          {
            "name": "memDetiailsId",
            "in": "path",
            "description": "memory detail id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "mem details.",
            "schema": {
              "type": "object",
              "properties": {
                "userId": {
                  "type": "string",
                  "description": "user Id who dislikes comment"
                }
              }
            }
          }
        ],
        "tags": [
          "Virtual Messages Details"
        ],
        "responses": {
          "204": {
            "description": "mem details successfully updated."
          },
          "400": {
            "description": "request body is insufficient",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          },
          "500": {
            "description": "Some error while updating mem details.",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          }
        }
      }
    },
    "/virtual_messages": {
      "get": {
        "summary": "RESTRICTED TO BE USED BY DEVs ONLY get all virtual messages",
        "description": "This endpoint returns all virtual messages of user.\nWe also can filter users by condition given in query.\n",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "description": "VM sender user Id.",
            "required": false,
            "type": "string"
          },
          {
            "name": "audienceType",
            "in": "query",
            "description": "audienceType, Public, Individual, Followers.",
            "required": false,
            "type": "string"
          },
          {
            "name": "messageType",
            "in": "query",
            "description": "messageType - Text or Video.",
            "required": false,
            "type": "string"
          },
          {
            "name": "category",
            "in": "query",
            "description": "category - see vm categories.",
            "required": false,
            "type": "string"
          },
          {
            "name": "targetAddress",
            "in": "query",
            "description": "Target Address",
            "required": false,
            "type": "string"
          },
          {
            "name": "targetCity",
            "in": "query",
            "description": "Target City",
            "required": false,
            "type": "string"
          },
          {
            "name": "targetState",
            "in": "query",
            "description": "Target State",
            "required": false,
            "type": "string"
          },
          {
            "name": "targetCountry",
            "in": "query",
            "description": "Target Country",
            "required": false,
            "type": "string"
          },
          {
            "name": "hasExpired",
            "in": "query",
            "description": "whether message has Expired",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "isFavourite",
            "in": "query",
            "description": "whether message is selected as user favourite",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "remoteRead",
            "in": "query",
            "description": "whether message can be remote read",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "allowAutoGrab",
            "in": "query",
            "description": "whether message can be auto grabbed",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns list of virtual messages",
            "schema": {
              "$ref": "#/definitions/VirtualMessages"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          },
          "500": {
            "description": "Returns 0 count if no virtual messages found",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          }
        },
        "tags": [
          "Virtual Messages"
        ]
      },
      "post": {
        "summary": "create new virtual messages",
        "description": "pass one or mutiple payloads to create new virtual messages.",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Object that will save VirtualMessages",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NewVirtualMessages"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Newly added virtual message",
            "schema": {
              "type": "object",
              "properties": {
                "vmId": {
                  "type": "string",
                  "description": "Newly created vmId or VM ids in case of multi insert",
                  "example": "VM-65f3c352-86d8-4bc3-a507-022ebd3fdc79"
                }
              }
            }
          },
          "400": {
            "description": "Invalid payload data",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          }
        },
        "tags": [
          "Virtual Messages"
        ]
      }
    },
    "/virtual_messages/constants": {
      "get": {
        "summary": "get vm realated constants",
        "description": "This endpoint returns all constants from backend relaetd to VM.\n Like Audio video duration, message text limit, distances limit etc",
        "responses": {
          "200": {
            "description": "Returns virtual message constants",
            "schema": {
              "type": "object",
              "properties": {
                "DistanceRange": {
                  "type": "object",
                  "properties": {
                    "distance": {
                      "type": "integer",
                      "description": "distance in miles"
                    }
                  }
                },
                "VideoDurations": {
                  "type": "object",
                  "properties": {
                    "seconds": {
                      "type": "integer",
                      "description": "duration in seconds"
                    },
                    "points": {
                      "type": "integer",
                      "description": "points to deduct"
                    }
                  }
                },
                "AudioDurations": {
                  "type": "object",
                  "properties": {
                    "seconds": {
                      "type": "integer",
                      "description": "duration in seconds"
                    },
                    "points": {
                      "type": "integer",
                      "description": "points to deduct"
                    }
                  }
                },
                "TextLimit": {
                  "type": "object",
                  "properties": {
                    "chars": {
                      "type": "integer",
                      "description": "no of characters"
                    },
                    "points": {
                      "type": "integer",
                      "description": "points to deduct"
                    }
                  }
                },
                "DefaultMonthlyFreeMessageQuotaLimit": {
                  "type": "integer",
                  "description": "no of default free messages per month"
                },
                "DefaultMonthlyFreeRemoteLimit": {
                  "type": "integer",
                  "description": "no of default free messages remote allowed without physically be preset at location per month"
                },
                "DefaultDistanceRangeForVM": {
                  "type": "string",
                  "description": "default distance range"
                },
                "DefaultDurationForVideoVM": {
                  "type": "integer",
                  "description": "default duration of free video messages"
                },
                "DefaultDaysNoActivity": {
                  "type": "integer",
                  "description": "no activity default days"
                },
                "DefaultLengthForTextVM": {
                  "type": "integer",
                  "description": "hold default duration of a text vm"
                },
                "MaxLengthForTitle": {
                  "type": "integer",
                  "description": "Max length for title"
                },
                "MaxLengthForTags": {
                  "type": "integer",
                  "description": "Max length for tags"
                },
                "DefaultCategory": {
                  "type": "string",
                  "description": "default category"
                }
              }
            }
          },
          "500": {
            "description": "Some error while fetching virtual messages constants",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          }
        },
        "tags": [
          "Virtual Messages"
        ]
      }
    },
    "/virtual_messages/{vmId}": {
      "get": {
        "summary": "get one virtual messages by id",
        "description": "This endpoint returns one vm by id.\n",
        "parameters": [
          {
            "name": "vmId",
            "in": "path",
            "description": "vm id.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns list of virtual messages",
            "schema": {
              "$ref": "#/definitions/VirtualMessages"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          },
          "500": {
            "description": "no virtual messages found",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          }
        },
        "tags": [
          "Virtual Messages"
        ]
      },
      "put": {
        "summary": "update one virtual message",
        "description": "Update one virtual message by id.\n",
        "parameters": [
          {
            "name": "vmId",
            "in": "path",
            "description": "user id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "updated user.",
            "schema": {
              "$ref": "#/definitions/VirtualMessages"
            }
          }
        ],
        "tags": [
          "Virtual Messages"
        ],
        "responses": {
          "204": {
            "description": "virtual message successfully updated."
          },
          "400": {
            "description": "request body is insufficient",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          },
          "500": {
            "description": "Some error while updating virtual messages.",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          }
        }
      },
      "delete": {
        "summary": "RESTRICTED TO BE USED BY DEVs ONLY delete one virtual message",
        "description": "Delete one virtual message by id.\n",
        "parameters": [
          {
            "name": "vmId",
            "in": "path",
            "description": "virtual message id.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Virtual Messages"
        ],
        "responses": {
          "204": {
            "description": "virtual message successfully deleted."
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          },
          "500": {
            "description": "Some error while deleting virtual message.",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          }
        }
      }
    },
    "/virtual_messages/user/{userId}": {
      "get": {
        "summary": "get list of virtual messages for userId",
        "description": "This endpoint returns vm's by userId.\n",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "user id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "isFavourite",
            "in": "query",
            "description": "user's favourite vm.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns list of virtual messages",
            "schema": {
              "$ref": "#/definitions/VirtualMessages"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          },
          "500": {
            "description": "no virtual messages found",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          }
        },
        "tags": [
          "Virtual Messages"
        ]
      },
      "delete": {
        "summary": "RESTRICTED TO BE USED BY DEVs ONLY delete user's virtual message",
        "description": "Delete all virtual message by user id.\n",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "user id.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Virtual Messages"
        ],
        "responses": {
          "204": {
            "description": "User's virtual messages have been successfully deleted."
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          },
          "500": {
            "description": "Some error while deleting user's virtual messages.",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          }
        }
      }
    },
    "/virtual_messages/quota/{userId}": {
      "get": {
        "summary": "get quota details for userId",
        "description": "This endpoint returns vm's send and isUnderFree quota by userId.\n",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "user id.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns quota details",
            "schema": {
              "type": "object",
              "properties": {
                "isVMUnderFreeMonthlyQuota": {
                  "type": "boolean",
                  "description": "This user has send vm under free quota limit"
                },
                "usedMonthlyVMMessageCount": {
                  "type": "number",
                  "format": "int32",
                  "description": "no of messages already sent"
                },
                "DefaultMonthlyFreeVMQuotaLimit": {
                  "type": "number",
                  "format": "int32",
                  "example": 15,
                  "description": "This user has send vm under free quota limit"
                },
                "DefaultMonthlyFreeMemoryQuotaLimit": {
                  "type": "number",
                  "format": "int32",
                  "example": 5,
                  "description": "Default monthly free memory quota limit"
                }
              }
            }
          },
          "500": {
            "description": "some error occured",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          }
        },
        "tags": [
          "Virtual Messages"
        ]
      }
    },
    "/virtual_messages/remote_quota/{userId}": {
      "get": {
        "summary": "get remote quota details for userId",
        "description": "This endpoint returns vm's send and isUnderFree remote quota by userId.\n",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "user id.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns remote quota details",
            "schema": {
              "type": "object",
              "properties": {
                "isVMUnderFreeMonthlyRemoteQuota": {
                  "type": "boolean",
                  "description": "This user has send vm under free remote quota limit"
                },
                "usedMonthlyVMRemoteMessagesCount": {
                  "type": "number",
                  "format": "int32",
                  "description": "no of messages already sent"
                },
                "DefaultMonthlyFreeVMRemoteQuotaLimit": {
                  "type": "number",
                  "format": "int32",
                  "example": 15,
                  "description": "This user has send vm under free remote quota limit"
                },
                "DefaultMonthlyFreeMemoryQuotaLimit": {
                  "type": "number",
                  "format": "int32",
                  "example": 5,
                  "description": "Default monthly free memory quota limit"
                }
              }
            }
          },
          "500": {
            "description": "some error occured",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          }
        },
        "tags": [
          "Virtual Messages"
        ]
      }
    },
    "/virtual_messages/tags/{vmId}": {
      "get": {
        "summary": "get virtual messages tags only in string one line",
        "description": "virtual message tags.",
        "parameters": [
          {
            "name": "vmId",
            "in": "path",
            "description": "vmId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "virtual message tags, comma seprated"
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          }
        },
        "tags": [
          "Virtual Messages"
        ]
      },
      "put": {
        "summary": "update virtual messages tags",
        "description": "updates and appends to any previous virtual message tags.",
        "parameters": [
          {
            "name": "vmId",
            "in": "path",
            "description": "vmId",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "category tags.",
            "schema": {
              "type": "object",
              "properties": {
                "tags": {
                  "type": "string",
                  "description": "comma seperated tags"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "updated virtual message tags"
          },
          "400": {
            "description": "Invalid payload data",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          }
        },
        "tags": [
          "Virtual Messages"
        ]
      }
    },
    "/virtual_messages/audience/{userId}": {
      "get": {
        "summary": "get user VM for target audience",
        "description": "IGNORED!  - This route has been ignored by roger and ashish on 30.Jun.2017   6pm IST.\nLists all Virtual Messages within the default distance range that are visible to particular user.\n",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "user id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "audienceType",
            "in": "query",
            "description": "audienceType, Public, Individual, Followers.",
            "required": true,
            "type": "string"
          },
          {
            "name": "messageType",
            "in": "query",
            "description": "messageType - Text or Video.",
            "required": true,
            "type": "string"
          },
          {
            "name": "category",
            "in": "query",
            "description": "category - see vm categories.",
            "required": true,
            "type": "string"
          },
          {
            "name": "remoteRead",
            "in": "query",
            "description": "whether message can be remote read",
            "required": true,
            "type": "boolean"
          },
          {
            "name": "city",
            "in": "query",
            "description": "Filter by city. Blank if not required.",
            "required": false,
            "type": "string"
          },
          {
            "name": "country",
            "in": "query",
            "description": "Filter by country. Blank if not required",
            "required": false,
            "type": "string"
          },
          {
            "name": "long",
            "in": "query",
            "description": "user location longitude.",
            "required": false,
            "type": "string"
          },
          {
            "name": "lat",
            "in": "query",
            "description": "user location latitude.",
            "required": false,
            "type": "string"
          },
          {
            "name": "distance",
            "in": "query",
            "description": "user selected distance range. Use float value or 'City' / 'Country' / 'Everywhere'",
            "required": false,
            "type": "string"
          },
          {
            "name": "unit",
            "in": "query",
            "description": "Unit of distance.",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Virtual Messages"
        ],
        "responses": {
          "200": {
            "description": "Returns list of user virtual messages within range",
            "schema": {
              "$ref": "#/definitions/VirtualMessages"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          },
          "500": {
            "description": "no virtual messages found.",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          }
        }
      }
    },
    "/virtual_messages/received/{userId}": {
      "post": {
        "summary": "virtual message received by a user",
        "description": "This route returns the virtual message received based on the location. The required fields are rangeType, is_memory and hasExpired. For Date filters, fromDate and toDate should be in M/D/YYYY",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "add select and where fields",
            "schema": {
              "type": "object",
              "properties": {
                "latitude": {
                  "type": "object",
                  "description": "comma seperated tags",
                  "example" : 76.5921
                },
                "longitude": {
                  "type": "object",
                  "description": "comma seperated tags",
                  "example" : 76.5921
                },
                "range": {
                  "type": "object",
                  "description": "comma seperated tags",
                  "example" : 1
                },
                "unit": {
                  "type": "object",
                  "description": "comma seperated tags",
                  "example" : "mi"
                },
                "is_memory": {
                  "type": "object",
                  "description": "comma seperated tags",
                  "example" : false
                },
                "hasExpired": {
                  "type": "object",
                  "description": "comma seperated tags",
                  "example" : false
                },
                "audienceType": {
                  "type": "object",
                  "description": "comma seperated tags",
                  "example" : "Individual"
                },
                "rangeType": {
                  "type": "object",
                  "description": "comma seperated tags",
                  "example" : "range"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "virtual message list"
          },
          "400": {
            "description": "Invalid payload data",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          }
        },
        "tags": [
          "Virtual Messages"
        ]
      }
    },
    "/virtual_messages/detail/{vmId}": {
      "post": {
        "summary": "save VM Detail - see sample",
        "description": "Save Virtual Messages Details.\n",
        "parameters": [
          {
            "name": "vmId",
            "in": "path",
            "description": "vm id.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Object that will save VirtualMessages",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NewVirtualMessagesDetail"
            }
          }
        ],
        "tags": [
          "Virtual Messages Details"
        ],
        "responses": {
          "201": {
            "description": "virtual messages detail id",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Newly created VM Detail's id"
                }
              }
            }
          },
          "400": {
            "description": "invalid vm detail payload.",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          }
        }
      }
    },
    "/virtual_messages/detail/{vmDetiailsId}": {
      "get": {
        "summary": "get VM Detail - by unique vm detail id",
        "description": "Lists Virtual Messages Details by unique id.\n",
        "parameters": [
          {
            "name": "vmDetiailsId",
            "in": "path",
            "description": "unique virtual message detail id.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Virtual Messages Details"
        ],
        "responses": {
          "200": {
            "description": "Returns virtual messages detail object",
            "schema": {
              "$ref": "#/definitions/VirtualMessageDetails"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          },
          "500": {
            "description": "no virtual messages found.",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          }
        }
      },
      "put": {
        "summary": "update virtual message detail - by vm detail Id",
        "description": "Update detail this will be used to add comments, likes etc.\n",
        "parameters": [
          {
            "name": "vmDetiailsId",
            "in": "path",
            "description": "virtual message detail id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "vm details.",
            "schema": {
              "$ref": "#/definitions/VirtualMessageDetails"
            }
          }
        ],
        "tags": [
          "Virtual Messages Details"
        ],
        "responses": {
          "204": {
            "description": "vm details successfully updated."
          },
          "400": {
            "description": "request body is insufficient",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          },
          "500": {
            "description": "Some error while updating vm details.",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          }
        }
      }
    },
    "/virtual_messages/detail/list/{vmId}": {
      "get": {
        "summary": "get VM Details list - by vmId",
        "description": "Lists given Virtual Messages Details like comments likes etc.\n",
        "parameters": [
          {
            "name": "vmId",
            "in": "path",
            "description": "virtual message id.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Virtual Messages Details"
        ],
        "responses": {
          "200": {
            "description": "Returns virtual messages details list",
            "schema": {
              "$ref": "#/definitions/VirtualMessageDetails"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          },
          "500": {
            "description": "no virtual messages found.",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          }
        }
      }
    },
    "/virtual_messages/detail/count/{vmId}": {
      "get": {
        "summary": "get VM Details counts - by vmId",
        "description": "Lists given Virtual Messages Details Counts like comments likes etc.\n",
        "parameters": [
          {
            "name": "vmId",
            "in": "path",
            "description": "virtual message id  -- vmId.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Virtual Messages Details"
        ],
        "responses": {
          "200": {
            "description": "Returns virtual messages details Count",
            "schema": {
              "$ref": "#/definitions/VirtualMessageDetailsCount"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          },
          "500": {
            "description": "no virtual messages found.",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          }
        }
      }
    },
    "/virtual_messages/detail/{vmDetiailsId}/comment": {
      "post": {
        "summary": "insert comment - by vm detail Id",
        "description": "Add comments.\n",
        "parameters": [
          {
            "name": "vmDetiailsId",
            "in": "path",
            "description": "virtual message detail id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "vm details.",
            "schema": {
              "type": "object",
              "properties": {
                "vmId": {
                  "type": "string",
                  "description": "vmId on which reply to be added"
                },
                "userId": {
                  "type": "string",
                  "description": "user Id who comments"
                },
                "replyId": {
                  "type": "string",
                  "description": "virtual message detail id that is replied on"
                },
                "comment": {
                  "type": "string",
                  "description": "comment message"
                }
              }
            }
          }
        ],
        "tags": [
          "Virtual Messages Details"
        ],
        "responses": {
          "201": {
            "description": "comment added successfully."
          },
          "400": {
            "description": "request body is insufficient",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          }
        }
      }
    },
    "/virtual_messages/detail/{vmDetiailsId}/like": {
      "put": {
        "summary": "like unlike a vm - by vm detail Id",
        "description": "Update like.\n",
        "parameters": [
          {
            "name": "vmDetiailsId",
            "in": "path",
            "description": "virtual message detail id.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Virtual Messages Details"
        ],
        "responses": {
          "204": {
            "description": "vm details successfully updated."
          },
          "400": {
            "description": "request body is insufficient",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          },
          "500": {
            "description": "Some error while updating vm details.",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          }
        }
      }
    },
    "/virtual_messages/detail/{vmDetiailsId}/unlike": {
      "put": {
        "summary": "dislike a vm - by vm detail Id",
        "description": "Dislike VM.\n",
        "parameters": [
          {
            "name": "vmDetiailsId",
            "in": "path",
            "description": "virtual message detail id.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Virtual Messages Details"
        ],
        "responses": {
          "204": {
            "description": "vm details successfully updated."
          },
          "400": {
            "description": "request body is insufficient",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          },
          "500": {
            "description": "Some error while updating vm details.",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          }
        }
      }
    },
    "/virtual_messages/detail/{vmDetiailsId}/report": {
      "put": {
        "summary": "report abuse on a comment - by vm detail Id",
        "description": "add report abuse on a comment.\n",
        "parameters": [
          {
            "name": "vmDetiailsId",
            "in": "path",
            "description": "virtual message detail id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "userId": {
                  "type": "string",
                  "description": "user Id who reports"
                }
              }
            }
          }
        ],
        "tags": [
          "Virtual Messages Details"
        ],
        "responses": {
          "204": {
            "description": "vm details successfully updated."
          },
          "400": {
            "description": "request body is insufficient",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          },
          "500": {
            "description": "Some error while updating vm details.",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          }
        }
      }
    },
    "/virtual_messages/detail/{vmDetiailsId}/like-comment": {
      "put": {
        "summary": "like a vm comment - by vm detail Id",
        "description": "Update like.\n",
        "parameters": [
          {
            "name": "vmDetiailsId",
            "in": "path",
            "description": "virtual message detail id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "vm details.",
            "schema": {
              "type": "object",
              "properties": {
                "userId": {
                  "type": "string",
                  "description": "user Id who likes comment"
                }
              }
            }
          }
        ],
        "tags": [
          "Virtual Messages Details"
        ],
        "responses": {
          "204": {
            "description": "vm details successfully updated."
          },
          "400": {
            "description": "request body is insufficient",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          },
          "500": {
            "description": "Some error while updating vm details.",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          }
        }
      }
    },
    "/virtual_messages/detail/{vmDetiailsId}/unlike-comment": {
      "put": {
        "summary": "dislike a vm comment - by vm detail Id",
        "description": "Update like.\n",
        "parameters": [
          {
            "name": "vmDetiailsId",
            "in": "path",
            "description": "virtual message detail id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "vm details.",
            "schema": {
              "type": "object",
              "properties": {
                "userId": {
                  "type": "string",
                  "description": "user Id who dislikes comment"
                }
              }
            }
          }
        ],
        "tags": [
          "Virtual Messages Details"
        ],
        "responses": {
          "204": {
            "description": "vm details successfully updated."
          },
          "400": {
            "description": "request body is insufficient",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          },
          "500": {
            "description": "Some error while updating vm details.",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          }
        }
      }
    },
    "/utils/auth/google-maps/key": {
      "get": {
        "summary": "google maps key",
        "description": "Get the Google maps UCME key from backend.\n",
        "tags": [
          "Utils"
        ],
        "responses": {
          "200": {
            "description": "Key contaning Maps API-key.",
            "schema": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string",
                  "description": "Key contaning Maps API-key."
                }
              }
            }
          }
        }
      }
    },
    "/utils/auth/vimeo/upload": {
      "get": {
        "summary": "vimeo upload url",
        "description": "vimeo upload url as well as access token.\n",
        "tags": [
          "Utils"
        ],
        "responses": {
          "200": {
            "description": "vimeo upload url.",
            "schema": {
              "type": "object",
              "properties": {
                "upload_link_secure": {
                  "type": "string",
                  "description": "vimeo upload url."
                },
                "access_token": {
                  "type": "string",
                  "description": "vimeo access_token."
                }
              }
            }
          }
        }
      }
    },
    "/utils/locations/distance": {
      "get": {
        "summary": "calculate distance",
        "description": "calculate distance between two points, given in query parameter.\n",
        "parameters": [
          {
            "name": "long1",
            "in": "query",
            "description": "longitude of Point1.",
            "required": true,
            "type": "string"
          },
          {
            "name": "lat1",
            "in": "query",
            "description": "latitude of Point1.",
            "required": true,
            "type": "string"
          },
          {
            "name": "long2",
            "in": "query",
            "description": "latitude of Point2.",
            "required": true,
            "type": "string"
          },
          {
            "name": "lat2",
            "in": "query",
            "description": "latitude of Point2.",
            "required": true,
            "type": "string"
          },
          {
            "name": "unit",
            "in": "query",
            "description": "Unit of distance.",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Utils"
        ],
        "responses": {
          "200": {
            "description": "Distance between two Points.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "$ref": "#/definitions/GenericResponseError"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "dist": {
                      "type": "string",
                      "description": "Distance between two Points"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/utils/locations/distance_and_areas": {
      "get": {
        "summary": "geocode areas and calculate distance",
        "description": "geocode areas and calculate distance between two points, given in query parameter.\n",
        "parameters": [
          {
            "name": "long1",
            "in": "query",
            "description": "longitude of Point1.",
            "required": true,
            "type": "string"
          },
          {
            "name": "lat1",
            "in": "query",
            "description": "latitude of Point1.",
            "required": true,
            "type": "string"
          },
          {
            "name": "long2",
            "in": "query",
            "description": "latitude of Point2.",
            "required": true,
            "type": "string"
          },
          {
            "name": "lat2",
            "in": "query",
            "description": "latitude of Point2.",
            "required": true,
            "type": "string"
          },
          {
            "name": "unit",
            "in": "query",
            "description": "Unit of distance.",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Utils"
        ],
        "responses": {
          "200": {
            "description": "Two areas and distance between two Points.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "$ref": "#/definitions/GenericResponseError"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "area1": {
                      "$ref": "#/definitions/Area"
                    },
                    "area2": {
                      "$ref": "#/definitions/Area"
                    },
                    "dist": {
                      "type": "string",
                      "description": "Distance between two Points"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/check/user/username/{username}": {
      "get": {
        "summary": "check if user with certain username exists or not.",
        "description": "returns if user with username already exists or not.\n",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "username.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Check"
        ],
        "responses": {
          "200": {
            "description": "If user with certain username already exists or not.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "$ref": "#/definitions/GenericResponseError"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "userId": {
                      "type": "string",
                      "description": "user's unique id"
                    },
                    "username": {
                      "$ref": "#/definitions/Username"
                    },
                    "age": {
                      "type": "integer",
                      "format": "int32",
                      "example": 28,
                      "description": "user's age"
                    },
                    "isTaken": {
                      "type": "string",
                      "description": "If user with given username already exists or not."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/check/user/email/{email}": {
      "get": {
        "summary": "check if user with certain email exists or not.",
        "description": "returns if user with email already exists or not.\n",
        "parameters": [
          {
            "name": "email",
            "in": "path",
            "description": "user email.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Check"
        ],
        "responses": {
          "200": {
            "description": "If user with certain email already exists or not.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "$ref": "#/definitions/GenericResponseError"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "userId": {
                      "type": "string",
                      "description": "user's unique id"
                    },
                    "username": {
                      "$ref": "#/definitions/Username"
                    },
                    "age": {
                      "type": "integer",
                      "format": "int32",
                      "example": 28,
                      "description": "user's age"
                    },
                    "isTaken": {
                      "type": "string",
                      "description": "If user with certain email already exists or not."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/invitation": {
      "post": {
        "summary": "Send invitation to user",
        "description": "Invite new user.\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "request body",
            "schema": {
              "$ref": "#/definitions/Invitations"
            }
          }
        ],
        "tags": [
          "Invitations"
        ],
        "responses": {
          "201": {
            "description": "Invitations successfully."
          },
          "400": {
            "description": "request body is insufficient"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "get": {
        "summary": "get all Invitations",
        "description": "This endpoint returns all Invitations.\n",
        "tags": [
          "Invitations"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Invitation"
          }
        }
      }
    },
    "/invitation/{userId}":{
      "get":{
        "summary":"Get Invitations by userId",
        "description":"Get Invitations by UCME user userId",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "UCME user userId.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Invitations"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Invitation"
          }
        }
      }
    },
    "/invitation/{invitationId}": {
      "put": {
        "summary": "Accept Invitation",
        "description": "Accept Invitation.\n",
        "parameters": [
          {
            "name": "invitationId",
            "in": "path",
            "description": "invitation id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "updatedInvitation",
            "in": "body",
            "description": "updated Invitation.",
            "schema": {
              "$ref": "#/definitions/InvitationAccept"
            }
          }
        ],
        "tags": [
          "Invitations"
        ],
        "responses": {
          "200": {
            "description": "A Invitation is Accepted successfully."
          },
          "400": {
            "description": "Invalid request body"
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/followers/{userId}/following_users": {
      "get": {
        "summary": "get follow request as per id",
        "description": "This endpoint returns follow request filter by userId.\n",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "user id.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Following"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/FollowRequest"
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/followers/{userId}/following_users/category/{category}": {
      "get": {
        "summary": "get follow request as per id,category",
        "description": "This endpoint returns all follow request filter by userId and category.\n",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "id autogenerate one",
            "required": true,
            "type": "string"
          },
          {
            "name": "category",
            "in": "path",
            "description": "category like family",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Following"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/FollowRequest"
          },
          "400": {
            "description": "Invalid request params"
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/followers/{userId}/following_users/status/{status}": {
      "get": {
        "summary": "get follow request as per id,status",
        "description": "This endpoint returns all follow request filter by userId and status.\n",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "id autogenerate one",
            "required": true,
            "type": "string"
          },
          {
            "name": "status",
            "in": "path",
            "description": "status like pending, accepted and rejected",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Following"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/FollowRequest"
          },
          "400": {
            "description": "Invalid request params"
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/followers/{userId}/follow_user/{targetId}": {
      "post": {
        "summary": "add one follow request",
        "description": "This endpoint adds one follow request.\n",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "id autogenerate one",
            "required": true,
            "type": "string"
          },
          {
            "name": "targetId",
            "in": "path",
            "description": "target user id",
            "required": true,
            "type": "string"
          },
          {
            "name": "followingRequest",
            "in": "body",
            "description": "request body",
            "schema": {
              "$ref": "#/definitions/NewFollowRequest"
            }
          }
        ],
        "tags": [
          "Following"
        ],
        "responses": {
          "201": {
            "description": "Follow request created successfully.",
            "schema": {
              "$ref": "#/definitions/NewFollowRequest"
            }
          },
          "400": {
            "description": "Invalid request body/params"
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/followers/{followRequestId}": {
      "put": {
        "summary": "change status to follow request",
        "description": "This endpoint change status to follow request.\n",
        "parameters": [
          {
            "name": "followRequestId",
            "in": "path",
            "description": "follow Request id",
            "required": true,
            "type": "string"
          },
          {
            "name": "updatedFollowRequest",
            "in": "body",
            "description": "updated follow request.",
            "schema": {
              "$ref": "#/definitions/updateFollowStatus"
            }
          }
        ],
        "tags": [
          "Following"
        ],
        "responses": {
          "201": {
            "description": "Follow request status updated successfully.",
            "schema": {
              "$ref": "#/definitions/updateFollowStatus"
            }
          },
          "400": {
            "description": "Invalid request body/params"
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/followers/{followRequestId}/unfollow_user": {
      "delete": {
        "summary": "delete one follow request",
        "description": "This endpoint delete one follow request.\n",
        "parameters": [
          {
            "name": "followRequestId",
            "in": "path",
            "description": "follow request id",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Following"
        ],
        "responses": {
          "200": {
            "description": "A follow request is successfully deleted."
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/followers/constants": {
      "get": {
        "summary": "get follow request related constants",
        "description": "This endpoint returns all constants from backend related to follow.",
        "responses": {
          "200": {
            "description": "Returns follow request constants",
            "schema": {
              "type": "object",
              "properties": {
                "PENDING":{
                  "type": "string",
                  "example": "pending"
                },
                "ACCEPTED":{
                  "type": "string",
                  "example": "accepted"
                },
                "REJECTED":{
                  "type": "string",
                  "example": "rejected"
                }
              }
            }
          },
          "500": {
            "description": "Some error while fetching follow request constants",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          }
        },
        "tags": [
          "Following"
        ]
      }
    },
    "/followers/{userId}": {
      "get": {
        "summary": "get followers as per id",
        "description": "This endpoint returns followers.\n",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "user id.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Followers"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/FollowRequest"
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/followers/{userId}/category/{category}": {
      "get": {
        "summary": "get followers as per id,category",
        "description": "This endpoint returns all followers of UCME.\n",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId autogenerate one",
            "required": true,
            "type": "string"
          },
          {
            "name": "category",
            "in": "path",
            "description": "category like family",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Followers"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/FollowRequest"
          },
          "400": {
            "description": "Invalid request params"
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/followers/{userId}/status/{status}": {
      "get": {
        "summary": "get followers as per id,status",
        "description": "This endpoint returns all followers of UCME.\n",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId autogenerate one",
            "required": true,
            "type": "string"
          },
          {
            "name": "status",
            "in": "path",
            "description": "status like pending, accepted and rejected",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Followers"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/FollowRequest"
          },
          "400": {
            "description": "Invalid request params"
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/followers/{userId}/follow": {
      "delete": {
        "summary": "removes followers and following users for user id",
        "description": "This endpoint removes all followers and following users--- For Dev use only.\n",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "user id.",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Follow Removal"
        ],
        "responses": {
          "200": {
            "description": "successfully removed all followers and following users."
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          },
          "500": {
            "description": "Some error while perfoming action.",
            "schema": {
              "$ref": "#/definitions/GenericResponseError"
            }
          }
        }
      }
    }
  },
  "responses": {
    "User": {
      "description": "An object of users",
      "schema": {
        "$ref": "#/definitions/User"
      }
    },
    "FollowRequest": {
      "description": "An object of follow request",
      "schema": {
        "$ref": "#/definitions/FollowRequest"
      },
      "examples": {
        "$ref": "#/definitions/FollowRequest"
      }
    },
    "UserPoint": {
      "description": "An object of user point",
      "schema": {
        "$ref": "#/definitions/UserPoint"
      },
      "examples": {
        "$ref": "#/definitions/UserPointExample"
      }
    },
    "UserStar": {
      "description": "An object of user star",
      "schema": {
        "$ref": "#/definitions/UserStar"
      },
      "examples": {
        "$ref": "#/definitions/UserStarExample"
      }
    },
    "UserStore": {
      "description": "A collection of user stored items",
      "schema": {
        "$ref": "#/definitions/UserStore"
      },
      "examples": {
        "$ref": "#/definitions/UserStoreExample"
      }
    },
    "UserTrack": {
      "description": "A collection of tracking users",
      "schema": {
        "$ref": "#/definitions/UserTrack"
      },
      "examples": {
        "$ref": "#/definitions/UserTrackExample"
      }
    },
    "UserLocation": {
      "description": "An object of user location info",
      "schema": {
        "$ref": "#/definitions/UserLocation"
      },
      "examples": {
        "$ref": "#/definitions/UserLocationExample"
      }
    },
    "UserNear": {
      "description": "An object of near user info",
      "schema": {
        "$ref": "#/definitions/UserNear"
      }
    },
    "UserRequest": {
      "description": "An object of requests",
      "schema": {
        "$ref": "#/definitions/UserRequest"
      }
    },
    "POI": {
      "description": "An object of POI",
      "schema": {
        "$ref": "#/definitions/POI"
      }
    },
    "Invitation":{
      "description": "An object of Invitation",
      "schema": {
        "$ref": "#/definitions/Invitation"
      }
    }
  },
  "definitions": {
    "User": {
      "type": "object",
      "example": {
        "userId": "UCME-66aad91c-e771-49c0-aeca-73354b4cb6bb",
        "username": "sample_user",
        "name": "sample user",
        "firstname": "sample",
        "lastname": "sample",
        "email": "sample@sample.com",
        "gender": "male",
        "birthday": "01/01/2000",
        "country": "SampleCountry",
        "city": "SampleCity",
        "isGaia": false,
        "push_notification": false,
        "allowAutoGrab": false,
        "isDeactivated": false,
        "gps": {
          "coordinates": [
            172.6753,
            -43.50943
          ]
        },
        "lastLogin": "2016-11-19T08:48:10.245Z",
        "createdAt": "2016-11-19T08:48:10.245Z",
        "updatedAt": "2016-11-19T08:48:10.245Z"
      },
      "properties": {
        "userId": {
          "$ref": "#/definitions/UserId"
        },
        "username": {
          "$ref": "#/definitions/Username"
        },
        "name": {
          "$ref": "#/definitions/Name"
        },
        "firstname": {
          "$ref": "#/definitions/UserFirstName"
        },
        "lastname": {
          "$ref": "#/definitions/UserLastName"
        },
        "email": {
          "$ref": "#/definitions/UserEmail"
        },
        "gender": {
          "$ref": "#/definitions/UserGender"
        },
        "age": {
          "type": "integer",
          "format": "int32",
          "example": 28,
          "description": "user's age"
        },
        "birthday": {
          "$ref": "#/definitions/UserBirthday"
        },
        "country": {
          "$ref": "#/definitions/UserCountry"
        },
        "city": {
          "$ref": "#/definitions/UserCity"
        },
        "isGaia": {
          "$ref": "#/definitions/UserIsGaia"
        },
        "push_notification": {
          "$ref": "#/definitions/push_notification"
        },
        "allowAutoGrab": {
          "$ref": "#/definitions/allowAutoGrab"
        },
        "willGaia": {
          "$ref": "#/definitions/UserWillGaia"
        },
        "gps": {
          "$ref": "#/definitions/UserGps"
        },
        "accountType": {
          "$ref": "#/definitions/UserAccountType"
        },
        "lastLogin": {
          "$ref": "#/definitions/UserLastLogin"
        },
        "createdAt": {
          "$ref": "#/definitions/CreatedAt"
        },
        "updatedAt": {
          "$ref": "#/definitions/UpdatedAt"
        }
      }
    },
    "FollowRequest": {
      "type": "object",
      "properties": {
        "userId": {
          "$ref": "#/definitions/UserId"
        },
        "username": {
          "$ref": "#/definitions/Username"
        },
        "name": {
          "$ref": "#/definitions/Name"
        },
        "firstname": {
          "$ref": "#/definitions/UserFirstName"
        },
        "lastname": {
          "$ref": "#/definitions/UserLastName"
        },
        "country": {
          "$ref": "#/definitions/UserCountry"
        },
        "city": {
          "$ref": "#/definitions/UserCity"
        },
        "image": {
          "$ref": "#/definitions/UserImage"
        },
        "isfollowing": {
          "$ref": "#/definitions/UserIsFollowing"
        },
        "category": {
          "$ref": "#/definitions/followRequestCategory"
        },
        "status": {
          "$ref": "#/definitions/followRequestStatus"
        },
        "followRequestId": {
          "$ref": "#/definitions/followRequestId"
        }
      }
    },
    "NewUser": {
      "type": "object",
      "properties": {
        "username": {
          "$ref": "#/definitions/Username"
        },
        "name": {
          "$ref": "#/definitions/Name"
        },
        "firstname": {
          "$ref": "#/definitions/UserFirstName"
        },
        "lastname": {
          "$ref": "#/definitions/UserLastName"
        },
        "email": {
          "$ref": "#/definitions/UserEmail"
        },
        "gender": {
          "$ref": "#/definitions/UserGender"
        },
        "birthday": {
          "$ref": "#/definitions/UserBirthday"
        },
        "country": {
          "$ref": "#/definitions/UserCountry"
        },
        "city": {
          "$ref": "#/definitions/UserCity"
        },
        "accountType": {
          "$ref": "#/definitions/UserAccountType"
        }
      },
      "example": {
        "username": "unique username",
        "name": "Name",
        "firstname": "sample_firstName",
        "lastname": "sample_lastName",
        "email": "sample@hoge.com",
        "gender": "male",
        "birthday": "10/10/1987",
        "country": "sample_country",
        "city": "sample_city",
        "trackingUsers": [],
        "followingUsers": [],
        "followers": [],
        "accountType": "google",
        "image": "/9j/4AAQSkZJRgABAQAAAQABAAD/2wCEAAkGBxITEhUSEhIVFhUWFRUVFxUXFRUVFRcXFhc",
        "user_onlineStatus": "active",
        "user_StarStatus": "Green",
        "user_profileStatus": "true",
        "user_emotionDisplay": "true",
        "user_memoryDisplayPrivate": "false",
        "user_memoryDisplayFamily": "false",
        "user_visibleFollowerOnly": "false",
        "user_visibletoGroupOnly": "true",
        "user_visibletoAll": "true",
        "registerCode": "1478"
      }
    },
    "CreateNewUser": {
      "type": "object",
      "properties": {
        "username": {
          "$ref": "#/definitions/Username"
        },
        "name": {
          "$ref": "#/definitions/Name"
        },
        "firstname": {
          "$ref": "#/definitions/UserFirstName"
        },
        "lastname": {
          "$ref": "#/definitions/UserLastName"
        },
        "email": {
          "$ref": "#/definitions/UserEmail"
        },
        "gender": {
          "$ref": "#/definitions/UserGender"
        },
        "birthday": {
          "$ref": "#/definitions/UserBirthday"
        },
        "country": {
          "$ref": "#/definitions/UserCountry"
        },
        "city": {
          "$ref": "#/definitions/UserCity"
        },
        "accountType": {
          "$ref": "#/definitions/UserAccountType"
        },
        "push_notification": {
          "$ref": "#/definitions/PushNotification"
        },
        "allowAutoGrab": {
          "$ref": "#/definitions/allowAutoGrab"
        }
      },
      "example": {
        "username": "unique username",
        "name": "Name",
        "firstname": "sample_firstName",
        "lastname": "sample_lastName",
        "email": "sample@hoge.com",
        "gender": "male",
        "birthday": "10/10/1987",
        "country": "sample_country",
        "city": "sample_city",
        "trackingUsers": [],
        "followingUsers": [],
        "followers": [],
        "accountType": "google",
        "image": "/9j/4AAQSkZJRgABAQAAAQABAAD/2wCEAAkGBxITEhUSEhIVFhUWFRUVFxUXFRUVFRcXFhc",
        "user_onlineStatus": "active",
        "user_StarStatus": "Green",
        "user_profileStatus": "true",
        "user_emotionDisplay": "true",
        "user_memoryDisplayPrivate": "false",
        "user_memoryDisplayFamily": "false",
        "user_visibleFollowerOnly": "false",
        "user_visibletoGroupOnly": "true",
        "user_visibletoAll": "true",
        "push_notification": "false",
        "allowAutoGrab": "false",
        "registerCode": "1478"
      }
    },
    "NewFollowRequest": {
      "type": "object",
      "properties": {
        "category": {
          "$ref": "#/definitions/UserCategory"
        }
      },
      "example": {
        "category": "family"
      }
    },
    "updateFollowStatus": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/UserStatus"
        }
      },
      "example": {
        "status": "accepted"
      }
    },
    "NewUserProfile": {
      "type": "object",
      "properties": {
        "image": {
          "$ref": "#/definitions/UserImage"
        }
      },
      "example": {
        "image": "/hjndjskdjsgcvjhsdbvd"
      }
    },
    "UserPoint": {
      "type": "object",
      "properties": {
        "items": {
          "type": "object",
          "properties": {
            "createdAt": {
              "$ref": "#/definitions/CreatedAt"
            },
            "updatedAt": {
              "$ref": "#/definitions/UpdatedAt"
            },
            "id": {
              "type": "string",
              "description": "Id of user points"
            },
            "points": {
              "type": "string",
              "description": "User points"
            },
            "userId": {
              "$ref": "#/definitions/UserId"
            }
          }
        }
      },
      "examples": {
        "$ref": "#/definitions/UserPointExample"
      }
    },
    "UserPointPost": {
      "type": "object",
      "properties": {
        "total_points_operation": {
          "type": "string",
          "description": "User point alter type",
          "enum": [
            "ADD",
            "REDUCE",
            "REPALCE"
          ],
          "required": true
        },
        "total_points": {
          "type": "integer",
          "format": "int32",
          "example": "25",
          "description": "User points",
          "required": true
        },
		"game_points_operation": {
          "type": "string",
          "description": "User point alter type",
          "enum": [
            "ADD",
            "REDUCE",
            "REPALCE"
          ],
          "required": true
        },
        "game_points": {
          "type": "integer",
          "format": "int32",
          "example": "20",
          "description": "Game points",
          "required": true
        },
		"cash_points_operation": {
          "type": "string",
          "description": "User point alter type",
          "enum": [
            "ADD",
            "REDUCE",
            "REPALCE"
          ],
          "required": true
        },
        "cash_points": {
          "type": "integer",
          "format": "int32",
          "example": "20",
          "description": "Cash points",
          "required": true
        }
      },
      "examples": {
        "$ref": "#/definitions/UserPointPostExample"
      }
    },
    "UserStar": {
      "type": "object",
      "properties": {
        "items": {
          "type": "object",
          "properties": {
            "createdAt": {
              "$ref": "#/definitions/CreatedAt"
            },
            "updatedAt": {
              "$ref": "#/definitions/UpdatedAt"
            },
            "id": {
              "type": "string",
              "description": "Id of user stars"
            },
            "star": {
              "type": "string",
              "description": "User stars"
            },
            "today": {
              "type": "string",
              "description": "Stars user earn today"
            },
            "userId": {
              "$ref": "#/definitions/UserId"
            }
          }
        }
      },
      "example": {
        "$ref": "#/definitions/UserStarExample"
      }
    },
    "UserStarsPost": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "User star alter type",
          "enum": [
            "ADD",
            "REDUCE",
            "REPALCE"
          ],
          "required": true
        },
        "stars": {
          "type": "integer",
          "format": "int32",
          "example": "25",
          "description": "User stars",
          "required": true
        }
      },
      "examples": {
        "$ref": "#/definitions/UserStarsPostExample"
      }
    },
    "UserStore": {
      "type": "object",
      "properties": {
        "userId": {
          "$ref": "#/definitions/UserId"
        },
        "type": {
          "type": "string",
          "description": "stored item's type"
        },
        "restCount": {
          "type": "string",
          "description": "how many items left"
        }
      },
      "example": {
        "$ref": "#/definitions/UserStoreExample"
      }
    },
    "UserTrack": {
      "type": "object",
      "properties": {
        "userId": {
          "$ref": "#/definitions/UserId"
        },
        "name": {
          "$ref": "#/definitions/Name"
        },
        "location": {
          "$ref": "#/definitions/Coordinates"
        }
      },
      "example": {
        "$ref": "#/definitions/UserLocationExample"
      }
    },
    "UserLocation": {
      "type": "object",
      "properties": {
        "id": {
          "$ref": "#/definitions/UserId"
        },
        "userId": {
          "$ref": "#/definitions/UserId"
        },
        "gps": {
          "type": "object",
          "properties": {
            "coordinates": {
              "$ref": "#/definitions/Coordinates"
            }
          }
        }
      },
      "example": {
        "$ref": "#/definitions/UserLocationExample"
      }
    },
    "UserNear": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "unique primary key"
        },
        "userId": {
          "$ref": "#/definitions/UserId"
        },
        "name": {
          "$ref": "#/definitions/Name"
        },
        "gps": {
          "type": "object",
          "properties": {
            "longitude": {
              "type": "string",
              "description": "longitude"
            },
            "latitude": {
              "type": "string",
              "description": "latitude"
            }
          }
        },
        "dist": {
          "type": "string",
          "description": "distance between users."
        }
      }
    },
    "UserRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "unique primary key"
        },
        "targetId": {
          "$ref": "#/definitions/UserId"
        },
        "senderId": {
          "$ref": "#/definitions/UserId"
        },
        "type": {
          "type": "string",
          "description": "Request's type."
        },
        "status": {
          "type": "string",
          "description": "Approved, Rejected or Not Processed."
        }
      },
      "example": {
        "$ref": "#/definitions/UserRequestExample"
      }
    },
    "POI": {
      "type": "object",
      "properties": {
        "userId": {
          "$ref": "#/definitions/UserId"
        },
        "userStoreId": {
          "$ref": "#/definitions/UserStoreId"
        },
        "location": {
          "$ref": "#/definitions/Coordinates"
        },
        "viewed": {
          "type": "string",
          "description": "total viewed count of this POi"
        },
        "shared": {
          "type": "string",
          "description": "total shared count of this POi"
        }
      },
      "example": {
        "$ref": "#/definitions/POIExample"
      }
    },
    "AROAnimal": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "ARO animal's id"
        },
        "type": {
          "type": "string",
          "description": "ARO animal's type"
        },
        "userId": {
          "type": "string",
          "description": "Id of user who owns this ARO Animal"
        }
      }
    },
    "AROList": {
      "type": "object",
      "properties": {
        "aroName": {
          "type": "string",
          "description": "name of ARO"
        },
        "createdAt": {
          "type": "Date",
          "description": "ARO's creation time"
        },
        "defaultPoint": {
          "type": "Number",
          "description": "default point of an ARO"
        },
        "type": {
          "type": "string",
          "description": "type of ARO"
        }
      }
    },
    "NewAROAnimal": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "ARO animal's type"
        },
        "userId": {
          "type": "string",
          "description": "Id of user who owns this ARO Animal"
        }
      }
    },
    "AROUserSave": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "description": "Id of user who owns this ARO Animal",
          "example":"UCME-55b2d54e-27a0-4457-8297-c6841ff5837e"
        },
        "aroId": {
          "type": "string",
          "description": "ARO animal's type",
          "example":"220ca851-09e1-491d-b3b8-977e1582eee9"
        } 
      }
    },
    "UpdateAROPoints": {
      "type": "object",
      "properties": {
        "UserAroId": {
          "type": "string",
          "description": "UserAroId ",
          "example":"UARO-2b52c192-5f2f-4f72-99a0-c30fcda28842"
        },
        "healthPoint": {
          "type": "number",
          "description": "Health Point of User's ARO",
          "example":35
        },
         "happinessPoint": {
          "type": "number",
          "description": "Happiness Point of User's ARO",
          "example":10
        }
      }
    },
    "Area": {
      "type": "object",
      "properties": {
        "zipcode": {
          "type": "string",
          "description": "area's zipcode"
        },
        "country": {
          "type": "string",
          "description": "country name"
        },
        "city": {
          "type": "string",
          "description": "city name"
        },
        "streetName": {
          "type": "string",
          "description": "street name"
        },
        "streetNumber": {
          "type": "string",
          "description": "street number"
        }
      }
    },
    "UserPointExample": {
      "example": {
        "createdAt": "2016-11-19T08:48:10.245Z",
        "updatedAt": "2016-11-19T08:48:10.245Z",
        "id": "sample_user_point_id",
        "userId": "sample_user_id",
        "points": 200
      }
    },
    "UserPointPostExample": {
      "example": {
        "type": "ADD",
        "points": 10
      }
    },
    "UserStarExample": {
      "example": {
        "createdAt": "2016-11-19T08:48:10.245Z",
        "updatedAt": "2016-11-19T08:48:10.245Z",
        "id": "sample_user_star_id",
        "userId": "sample_user_id",
        "star": 0
      }
    },
    "UserStarsPostExample": {
      "example": {
        "type": "REDUCE",
        "points": 10
      }
    },
    "UserStoreExample": {
      "example": {
        "createdAt": "2016-11-19T08:48:10.245Z",
        "updatedAt": "2016-11-19T08:48:10.245Z",
        "id": "sample_user_store_id",
        "userId": "sample_user_id",
        "type": "IMAGE"
      }
    },
    "UserTrackExample": {
      "example": {
        "createdAt": "2016-11-19T08:48:10.245Z",
        "updatedAt": "2016-11-19T08:48:10.245Z",
        "id": "sample_user_track_id",
        "userId": "sample_user_id",
        "name": "hoge",
        "location": {
          "longitude": "-71.063611",
          "latitude": "42.358056"
        }
      }
    },
    "UserLocationExample": {
      "example": {
        "id": "sample_id",
        "userId": "sample_userId",
        "name": "sample_user",
        "gps": {
          "coordinates": [
            "-71.063611",
            "42.358056"
          ]
        }
      }
    },
    "UserRequestExample": {
      "example": {
        "id": "sample_id",
        "targetId": "sample_target_user_id",
        "senderId": "sample_sender_user_id",
        "type": "TRACK_REQUEST",
        "status": "APPROVED"
      }
    },
    "POIExample": {
      "example": {
        "userId": "sample_user_id",
        "userStoreId": "sample_user_store_id",
        "location": {
          "longitude": -71.063611,
          "latitude": 42.358056
        },
        "viewed": 400,
        "shared": 10
      }
    },
    "Memory": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "example": "userId"
        },
        "messageType": {
          "type": "string",
          "example": "Text"
        },
        "category": {
          "type": "string",
          "example": "Private"
        },
        "audienceType": {
          "type": "string",
          "example": "Me"
        },
        "body": {
          "type": "string",
          "example": "A secret text message",
          "description": "text message"
        },
        "noOfTimeViewed": {
          "type": "integer",
          "format": "int32",
          "example": "25"
        },
        "freeMessageQuota": {
          "type": "boolean",
          "example": true
        },
        "remoteRead": {
          "type": "boolean",
          "example": true
        },
        "longitude": {
          "type": "integer",
          "format": "double",
          "example": 76.8121
        },
        "latitude": {
          "type": "integer",
          "format": "double",
          "example": 30.74113
        }
      }
    },
    "NewMemory": {
      "type": "object",
      "required": [
        "userId",
        "messageType",
        "category",
        "audienceType",
        "body"
      ],
      "properties": {
        "userId": {
          "type": "string",
          "example": "userId"
        },
        "messageType": {
          "type": "string",
          "example": "Text"
        },
        "category": {
          "type": "string",
          "example": "Private"
        },
        "audienceType": {
          "type": "string",
          "example": "Me"
        },
        "body": {
          "type": "string",
          "example": "I remember my childhood here.",
          "description": "text message"
        },
        "noOfTimeViewed": {
          "type": "integer",
          "format": "int32",
          "example": "25"
        },
        "freeMessageQuota": {
          "type": "boolean",
          "example": true
        },
        "remoteRead": {
          "type": "boolean",
          "example": true
        },
        "longitude": {
          "type": "integer",
          "format": "double",
          "example": 76.8121
        },
        "latitude": {
          "type": "integer",
          "format": "double",
          "example": 30.74113
        }
      }
    },
    "VirtualMessages": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "example": "userId"
        },
        "messageType": {
          "type": "string",
          "example": "Text"
        },
        "category": {
          "type": "string",
          "example": "Private"
        },
        "audienceType": {
          "type": "string",
          "example": "Public"
        },
        "body": {
          "type": "string",
          "example": "A secret text message",
          "description": "text message"
        },
        "noOfTimeViewed": {
          "type": "integer",
          "format": "int32",
          "example": "25"
        },
        "freeMessageQuota": {
          "type": "boolean",
          "example": true
        },
        "remoteRead": {
          "type": "boolean",
          "example": true
        },
        "longitude": {
          "type": "integer",
          "format": "double",
          "example": 76.5921
        },
        "latitude": {
          "type": "integer",
          "format": "double",
          "example": 76.5921
        },
        "targetAddress": {
          "type": "string",
          "example": "3, golden Apartment, Gandhinagar"
        },
        "targetCity": {
          "type": "string",
          "example": "Gandhinagar"
        },
        "targetState": {
          "type": "string",
          "example": "Gujarat"
        },
        "targetCountry": {
          "type": "string",
          "example": "India"
        },
        "range": {
          "type": "string",
          "example": "0.01 Mile"
        }
      }
    },
    "NewVirtualMessages": {
      "type": "object",
      "required": [
        "userId",
        "messageType",
        "category",
        "audienceType",
        "range",
        "body"
      ],
      "properties": {
        "userId": {
          "type": "string",
          "example": "userId"
        },
        "messageType": {
          "type": "string",
          "example": "Text"
        },
        "category": {
          "type": "string",
          "example": "Private",
          "enum":["Private",
            "Music","Pets","Education","Knowledge","Tragedy","Tourism & Travel",
            "Beauty & Wellness","Celebrations","Advocacy & Community","Celebrities","Religion","Family & Friends",
            "Stores & Shopping","Leisure & Entertainment","Sports","Restaurant & Pubs","Humor","Business","Advertising",
            "Library & Museum","Dating","Nightlife","Politics","Other","Adult"]
        },
        "targetAddress": {
          "type": "string",
          "example": "3, golden Apartment, Gandhinagar"
        },
        "targetCity": {
          "type": "string",
          "example": "Gandhinagar"
        },
        "targetState": {
          "type": "string",
          "example": "Gujarat"
        },
        "targetCountry": {
          "type": "string",
          "example": "India"
        },
        "audienceType": {
          "type": "string",
          "example": "Public"
        },
        "range": {
          "type": "string",
          "example": "0.01 Mile",
          "enum":[
            "0.01 Mile",
            "0.02 Mile",
            "0.03 Mile",
            "0.1 Mile",
            "0.5 Mile",
            "1 Mile",
            "1.5 Mile",
            "2 Mile",
            "City",
            "Country",
            "Everywhere"
          ],
          "required": true
        },
        "body": {
          "type": "string",
          "example": "A secret text message",
          "description": "text message"
        },
        "sender_display_name": {
          "type": "string",
          "example": "john"
        },
		"message_language": {
          "type": "string",
          "example": "English"
        },
		"message_actor": {
          "type": "string",
          "example": "Hanna"
        },
		"virtual_assitant_enbled": {
          "type": "boolean",
          "example": true
        },
        "noOfTimeViewed": {
          "type": "integer",
          "format": "int32",
          "example": 36
        },
        "title": {
          "type": "string",
          "example": "This one is for #theonewhomustnotbenamed"
        },
        "freeMessageQuota": {
          "type": "boolean",
          "example": true
        },
        "remoteRead": {
          "type": "boolean",
          "example": true
        },
        "longitude": {
          "type": "integer",
          "format": "double",
          "example": 76.5921
        },
        "latitude": {
          "type": "integer",
          "format": "double",
          "example": 76.5921
        }
      }
    },
    "VirtualMessageDetails": {
      "type": "object",
      "properties": {
        "vmId": {
          "type": "string",
          "example": "unique vmId"
        },
        "userId": {
          "type": "string",
          "example": "unique user Id"
        },
        "rating": {
          "type": "integer",
          "format": "int32",
          "example": 3
        },
        "comment": {
          "type": "string",
          "example": "A very inspiring message."
        },
        "isLiked": {
          "type": "boolean",
          "example": true
        }
      }
    },
    "VirtualMessageDetailsCount": {
      "type": "object",
      "properties": {
        "totalComments": {
          "type": "integer",
          "format": "int32",
          "description": "total comments for particular VMid.",
          "example": 50
        },
        "totalLikes": {
          "type": "integer",
          "format": "int32",
          "description": "total likes for particular VMid.",
          "example": 34
        },
        "averageRating": {
          "type": "number",
          "format": "float",
          "description": "average ratings for particular VMid.",
          "example": 3.53
        }
      }
    },
    "NewVirtualMessagesDetail": {
      "type": "object",
      "required": [
        "vmId",
        "userId"
      ],
      "properties": {
        "vmId": {
          "type": "string",
          "example": "unique vmId"
        },
        "userId": {
          "type": "string",
          "example": "unique user Id"
        },
        "rating": {
          "type": "integer",
          "format": "int32",
          "example": 3
        },
        "comment": {
          "type": "string",
          "example": "A very inspiring message."
        },
        "isLiked": {
          "type": "boolean",
          "example": true
        }
      }
    },
    "GenericResponseError": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "description": "error message"
        },
        "description": {
          "type": "string",
          "description": "error detail description"
        }
      }
    },
    "ResponseInfo": {
      "type": "string",
      "description": "response info"
    },
    "ResponseStatus": {
      "type": "string",
      "description": "response status code"
    },
    "ResponseCount": {
      "type": "string",
      "description": "response items' count"
    },
    "UserId": {
      "type": "string",
      "description": "Unique identifier representing a specific user."
    },
    "Username": {
      "type": "string",
      "description": "Unique username which user entered."
    },
    "Name": {
      "type": "string",
      "description": "The name of user. Must be unique."
    },
    "UserFirstName": {
      "type": "string",
      "description": "The first name of user."
    },
    "UserLastName": {
      "type": "string",
      "description": "The last name of user."
    },
    "UserEmail": {
      "type": "string",
      "description": "The email of user. Must be unique."
    },
    "UserGender": {
      "type": "string",
      "description": "The gender of user. Must be male or female."
    },
    "UserBirthday": {
      "type": "string",
      "description": "The birthday of user. Must be the format of MM/DD/YYYY."
    },
    "UserCountry": {
      "type": "string",
      "description": "The country where user lives."
    },
    "UserCity": {
      "type": "string",
      "description": "The city where user lives."
    },
    "UserImage": {
      "type": "string",
      "description": "The Image of user in base64."
    },
    "UserIsFollowing": {
      "type": "string",
      "description": "The Info that someone is following user."
    },
    "UserCategory": {
      "type": "string",
      "description": "The category must be family,friend or contact."
    },
    "UserStatus": {
      "type": "string",
      "description": "The status must be pending, accepted or rejected."
    },
    "UserIsGaia": {
      "type": "string",
      "description": "If user is Gaia or not. Gaia is a kind of status in UCME."
    },
    "push_notification": {
      "type": "boolean",
      "description": "user push notification."
    },
    "UserWillGaia": {
      "type": "string",
      "description": "If user will be Gaia tomorrow or not."
    },
    "UserGps": {
      "type": "string",
      "description": "Geolocation information of user."
    },
    "UserAccountType": {
      "type": "string",
      "description": "In which way user created account. Facebook, Google or UCME."
    },
    "PushNotification": {
      "type": "boolean",
      "description": "Push Notification."
    },
    "allowAutoGrab": {
      "type": "boolean",
      "description": "Allow Auto Grab."
    },
    "UserLastLogin": {
      "type": "string",
      "description": "Last logedin date of user."
    },
    "UserStoreId": {
      "type": "string",
      "description": "The ID of user_store item."
    },
    "POIId": {
      "type": "string",
      "description": "The ID of POI."
    },
    "Coordinates": {
      "type": "object",
      "description": "longitude and latitude",
      "items": {
        "type": "string"
      }
    },
    "CoordinatesObject": {
      "type": "object",
      "description": "longitude and latitude",
      "properties": {
        "longitude": {
          "type": "integer",
          "format": "double",
          "example": 77
        },
        "latitude": {
          "type": "integer",
          "format": "double",
          "example": 7
        }
      }
    },
    "CreatedAt": {
      "type": "string",
      "description": "The date when document was created."
    },
    "UpdatedAt": {
      "type": "string",
      "description": "The date when document was updated. If never updated, updatedAt can be empty."
    },
    "Invitations": {
      "type": "object",
      "description": "Invitation Profile",
      "properties": {
        "senderId": {
          "type": "string",
          "example": "senderUserId"
        },
        "firstname": {
          "type": "string",
          "example": "Profile_firstname"
        },
        "lastname": {
          "type": "string",
          "example": "Profile_lastname"
        },
        "email": {
          "type": "string",
          "example": "email@yopmail.com"
        },
        "category": {
          "type": "string",
          "example": "friend"
        },
        "registerCode": {
          "type": "string",
          "example": "1478"
        }
      }
    },
    "InvitationAccept": {
      "type": "object",
      "description": "Invitation Profile",
      "properties": {
        "username": {
          "type": "string",
          "example": "User132",
          "description":"Unique username which user entered"
        },
        "name": {
          "type": "string",
          "example": "name",
          "description":"The name of user. Must be unique"
        },
        "accountType": {
          "type": "string",
          "example": "google",
          "description":"In which way user created account. Facebook, Google or UCME."
        },
        "user_StarStatus": {
          "type": "string",
          "example": "Green"
        },
        "birthday": {
          "type": "string",
          "example": "01/01/2000",
          "description":"The birthday of user. Must be the format of MM/DD/YYYY."
        },
        "gender": {
          "type": "string",
          "example": "male",
          "description":"The gender of user. Must be male or female."
        },
        "longitude": {
          "type": "string",
          "example": "77"
        },
        "latitude": {
          "type": "string",
          "example": "7"
        }
      }
    },
    "Invitation":{
      "type": "object",
      "example": {
        "id": "70268679-6ddb-4ad9-a998-3565ecb9aab6",
        "senderId": "UCME-a2a9030b-c991-480a-8414-dbbf4ab169d5",
        "firstname": "sample",
        "lastname": "sample",
        "email": "email@yopmail.com",
        "category": "friend",
        "status": "accepted",
        "registerCode": "1478",
        "createdAt": "2017-01-19T08:48:10.245Z",
        "updatedAt": "2017-01-19T08:48:10.245Z"
      },
      "properties":{
        "id":{
          "type": "string",
          "description": "Invitation id"
        },
        "senderId":{
          "type": "string",
          "description": "UCME user userId"
        },
        "firstname":{
          "type": "string",
          "description": "user firstname"
        },
        "lastname":{
          "type": "string",
          "description": "user lastname"
        },
        "category":{
          "type": "string",
          "description": "category"
        },
        "status":{
          "type": "string",
          "description": "status"
        },
        "createdAt":{
          "type": "string",
          "description": " The date when document was created."
        },
        "updatedAt":{
          "type": "string",
          "description": " The date when document was updatedAt."
        }

      }
    },
    "UCME_ExchangeRate_Points": {
      "type": "object",
      "description": "UCME ExchangeRate Points",
      "properties": {
        "GamePointsValue": {
          "type": "integer",
          "example": 100
        },
        "CashPointsEquivalent": {
          "type": "integer",
          "example": 5
        }
      }
    },
    "UCME_Points_Transfer_Quota": {
      "type": "object",
      "description": "UCME Points Transfer Quota",
      "properties": {
        "MonthlyCashpointsTransfersQuota": {
          "type": "integer",
          "example": 1
        },
        "MonthlyMaxCashPointsTransferLimit": {
          "type": "integer",
          "example": 1200
        }
      }
    },
    "followRequestId": {
      "type": "string",
      "description": "Unique identifier representing a specific follow request."
    },
    "followRequestStatus": {
      "type": "string",
      "description": "The status must be pending, accepted or rejected."
    },
    "followRequestCategory": {
      "type": "string",
      "description": "The category must be family,friend or contact."
    }
  }
}