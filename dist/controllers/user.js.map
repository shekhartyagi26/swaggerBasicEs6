{"version":3,"sources":["../../src/controllers/user.js"],"names":["UserController","create","req","res","UserModel","User","body","first_name","last_name","email","password","phone_number","country_code","data","status","findOne","then","result","json","merge","date_created","Date","timestamp","getTime","access_token","save","response","catch","e","login","user","_id","update","forgotPassword","href","html","sendMail","nodeMailer","subject","text","nodeMailer_email","mailsent","verifyEmail","verification_code","resetPassword","insertData","logout","headers","editProfile","full_name","profession","dob","bio","latitude","longitude","address","file","verifiedData","actual_path","controller"],"mappings":";;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;IAEaA,c,WAAAA,c;;;;;;;;;;;;;;0MAGTC,M,GAAS,UAACC,GAAD,EAAMC,GAAN,EAAc;AACnB,gBAAMC,YAAYF,IAAIG,IAAtB;AADmB,4BAE0DH,IAAII,IAF9D;AAAA,gBAEbC,UAFa,aAEbA,UAFa;AAAA,gBAEDC,SAFC,aAEDA,SAFC;AAAA,gBAEUC,KAFV,aAEUA,KAFV;AAAA,gBAEiBC,QAFjB,aAEiBA,QAFjB;AAAA,gBAE2BC,YAF3B,aAE2BA,YAF3B;AAAA,gBAEyCC,YAFzC,aAEyCA,YAFzC;;AAGnB,gBAAIC,OAAO,uBAAS,EAAEN,sBAAF,EAAcC,oBAAd,EAAyBC,YAAzB,EAAgCC,kBAAhC,EAAT,CAAX;AACA,gBAAIG,KAAKC,MAAT,EAAiB;AACb,+BAAKC,OAAL,CAAaX,SAAb,EAAwB,EAAEK,YAAF,EAAxB,EAAmCO,IAAnC,CAAwC,UAACC,MAAD,EAAY;AAChD,wBAAIA,MAAJ,EAAY;AACRd,4BAAIW,MAAJ,wBAA0BI,IAA1B,CAA+B,mDAA/B;AACH,qBAFD,MAEO;AACHL,+BAAO,iBAAEM,KAAF,CAAQN,KAAKA,IAAb,EAAmB,yBAAW,EAAEF,0BAAF,EAAgBC,0BAAhB,EAAX,CAAnB,CAAP;AACAC,6BAAKH,QAAL,GAAgB,6BAAeA,QAAf,CAAhB;AACAG,6BAAKO,YAAL,GAAoB,IAAIC,IAAJ,EAApB;AACAR,6BAAKS,SAAL,GAAiB,IAAID,IAAJ,GAAWE,OAAX,EAAjB;AACA,4BAAIC,gBAAe,wBAAYf,KAAZ,CAAnB;AACAI,6BAAKW,YAAL,GAAoBA,aAApB;AACA,uCAAKC,IAAL,CAAUrB,SAAV,EAAqBS,IAArB,EAA2BG,IAA3B,CAAgC,UAACU,QAAD,EAAc;AAC1CvB,gCAAIW,MAAJ,yBAA2BI,IAA3B,CAAgC,4BAAc,EAAET,YAAF,EAASe,2BAAT,EAAd,CAAhC;AACH,yBAFD;AAGH;AACJ,iBAdD,EAcGG,KAdH,CAcS,UAACC,CAAD,EAAO;AACZzB,wBAAIW,MAAJ,6BAA+BI,IAA/B,CAAoC,0BAAYU,CAAZ,CAApC;AACH,iBAhBD;AAiBH,aAlBD,MAkBO;AACHzB,oBAAIW,MAAJ,mCAAqCI,IAArC,CAA0C,+BAAiBL,KAAKA,IAAtB,CAA1C;AACH;AACJ,S,QAGDgB,K,GAAQ,UAAC3B,GAAD,EAAMC,GAAN,EAAc;AAAA,6BACQD,IAAII,IADZ;AAAA,gBACZG,KADY,cACZA,KADY;AAAA,gBACLC,QADK,cACLA,QADK;;AAElB,gBAAIG,OAAO,uBAAS,EAAEJ,YAAF,EAASC,kBAAT,EAAT,CAAX;AACA,gBAAIG,KAAKC,MAAT,EAAiB;AACbD,uBAAOA,KAAKA,IAAZ;AACA,oBAAIT,YAAYF,IAAIG,IAApB;AACAQ,qBAAKH,QAAL,GAAgB,6BAAeA,QAAf,CAAhB;AACA,+BAAKK,OAAL,CAAaX,SAAb,EAAwBS,IAAxB,EAA8BG,IAA9B,CAAmC,UAACc,IAAD,EAAU;AACzC,wBAAIA,IAAJ,EAAU;AACN,4BAAIN,iBAAe,wBAAYM,KAAKC,GAAjB,CAAnB;AACA,uCAAKC,MAAL,CAAY5B,SAAZ,EAAuBS,IAAvB,EAA6B,EAAEW,4BAAF,EAA7B,EAA+CR,IAA/C,CAAoD,UAACC,MAAD,EAAY;AAC5Dd,gCAAIW,MAAJ,yBAA2BI,IAA3B,CAAgC,4BAAcD,MAAd,sCAAhC;AACH,yBAFD,EAEGU,KAFH,CAES,UAACC,CAAD,EAAO;AAAEzB,gCAAIW,MAAJ,6BAA+BI,IAA/B,CAAoC,0BAAYU,CAAZ,CAApC;AAAsD,yBAFxE;AAGH,qBALD,MAKO;AACHzB,4BAAIW,MAAJ,mCAAqCI,IAArC,CAA0C,8DAA1C;AACH;AACJ,iBATD,EASGS,KATH,CASS,UAACC,CAAD,EAAO;AAAEzB,wBAAIW,MAAJ,6BAA+BI,IAA/B,CAAoC,0BAAYU,CAAZ,CAApC;AAAsD,iBATxE;AAUH,aAdD,MAcO;AACHzB,oBAAIW,MAAJ,6BAA+BI,IAA/B,CAAoC,+BAAiBL,KAAKA,IAAtB,CAApC;AACH;AACJ,S,QAIDoB,c,GAAiB,UAAC/B,GAAD,EAAMC,GAAN,EAAc;AAAA,gBACrBM,KADqB,GACXP,IAAII,IADO,CACrBG,KADqB;;AAE3B,gBAAML,YAAYF,IAAIG,IAAtB;AACA,gBAAII,KAAJ,EAAW;AACP,+BAAKM,OAAL,CAAaX,SAAb,EAAwB,EAAEK,YAAF,EAAxB,EAAmCO,IAAnC,CAAwC,UAACc,IAAD,EAAU;AAC9C,wBAAI,CAACA,IAAL,EAAW;AACP3B,4BAAIW,MAAJ,mCAAqCI,IAArC,CAA0C,6DAA1C;AACH,qBAFD,MAEO;AACH,4BAAIgB,OAAO,qEAAX;AACA,4BAAIC,6lBAAqlBD,IAArlB,oIAAJ;AACA,uCAAKE,QAAL,CAAc3B,KAAd,EAAqB,0BAAW4B,UAAX,CAAsBC,OAA3C,EAAoD,0BAAWD,UAAX,CAAsBE,IAA1E,EAAgF,iBAAOC,gBAAvF,EAAyGL,IAAzG,EACKnB,IADL,CACU,UAACyB,QAAD,EAAc;AAChBtC,gCAAIW,MAAJ,yBAA2BI,IAA3B,CAAgC,4BAAc,EAAET,YAAF,EAASe,0BAAT,EAAd,oBAAhC;AACH,yBAHL,EAGOG,KAHP,CAGa,UAACC,CAAD,EAAO;AAAEzB,gCAAIW,MAAJ,6BAA+BI,IAA/B,CAAoC,0BAAYU,CAAZ,CAApC;AAAsD,yBAH5E;AAIH;AACJ,iBAXD,EAWGD,KAXH,CAWS,UAACC,CAAD,EAAO;AAAEzB,wBAAIW,MAAJ,6BAA+BI,IAA/B,CAAoC,0BAAYU,CAAZ,CAApC;AAAsD,iBAXxE;AAYH,aAbD,MAaO;AACHzB,oBAAIW,MAAJ,mCAAqCI,IAArC,CAA0C,gCAA1C;AACH;AACJ,S,QAGDwB,W,GAAc,UAACxC,GAAD,EAAMC,GAAN,EAAc;AAAA,6BACWD,IAAII,IADf;AAAA,gBAClBG,KADkB,cAClBA,KADkB;AAAA,gBACXkC,iBADW,cACXA,iBADW;;AAExB,gBAAMvC,YAAYF,IAAIG,IAAtB;AACA,gBAAII,KAAJ,EAAW;AACP,+BAAKM,OAAL,CAAaX,SAAb,EAAwB,EAAEK,YAAF,EAASkC,oCAAT,EAAxB,EAAsD3B,IAAtD,CAA2D,UAACc,IAAD,EAAU;AACjE,wBAAI,CAACA,IAAL,EAAW;AACP3B,4BAAIW,MAAJ,mCAAqCI,IAArC,CAA0C,6DAA1C;AACH,qBAFD,MAEO;AACHf,4BAAIW,MAAJ,yBAA2BI,IAA3B,CAAgC,4BAAc,EAAEM,0BAAF,EAAd,CAAhC;AAEH;AACJ,iBAPD,EAOGG,KAPH,CAOS,UAACC,CAAD,EAAO;AAAEzB,wBAAIW,MAAJ,6BAA+BI,IAA/B,CAAoC,0BAAYU,CAAZ,CAApC;AAAsD,iBAPxE;AAQH,aATD,MASO;AACHzB,oBAAIW,MAAJ,mCAAqCI,IAArC,CAA0C,gCAA1C;AACH;AACJ,S,QAGD0B,a,GAAgB,UAAC1C,GAAD,EAAMC,GAAN,EAAc;AAC1B,gBAAIC,YAAYF,IAAIG,IAApB;AAD0B,6BAEAH,IAAII,IAFJ;AAAA,gBAEpBG,KAFoB,cAEpBA,KAFoB;AAAA,gBAEbC,QAFa,cAEbA,QAFa;;AAG1B,gBAAIG,OAAO,uBAAS,EAAEJ,YAAF,EAASC,kBAAT,EAAT,CAAX;AACA,gBAAIG,KAAKC,MAAT,EAAiB;AACbD,uBAAOA,KAAKA,IAAZ;AACA,+BAAKmB,MAAL,CAAY5B,SAAZ,EAAuBS,IAAvB,EAA6B,EAAEH,UAAU,6BAAeA,QAAf,CAAZ,EAA7B,EAAqEM,IAArE,CAA0E,UAAC6B,UAAD,EAAgB;AACtF,wBAAIA,UAAJ,EAAgB;AACZ1C,4BAAIW,MAAJ,yBAA2BI,IAA3B,CAAgC,4BAAc,EAAd,mCAAhC;AACH,qBAFD,MAEO;AACHf,4BAAIW,MAAJ,mCAAqCI,IAArC,CAA0C,6DAA1C;AACH;AACJ,iBAND,EAMGS,KANH,CAMS,UAACC,CAAD,EAAO;AAAEzB,wBAAIW,MAAJ,6BAA+BI,IAA/B,CAAoC,0BAAYU,CAAZ,CAApC;AAAqD,iBANvE;AAOH,aATD,MASO;AACHzB,oBAAIW,MAAJ,mCAAqCI,IAArC,CAA0C,+BAAiBL,KAAKA,IAAtB,CAA1C;AACH;AACJ,S,QAGDiC,M,GAAS,UAAC5C,GAAD,EAAMC,GAAN,EAAc;AAAA,gBACbqB,YADa,GACItB,IAAI6C,OADR,CACbvB,YADa;;AAEnB,gBAAIpB,YAAYF,IAAIG,IAApB;AACA,2BAAK2B,MAAL,CAAY5B,SAAZ,EAAuB,EAAEoB,0BAAF,EAAvB,EAAyC,EAAEA,cAAc,EAAhB,EAAzC,EAA+DR,IAA/D,CAAoE,UAAC6B,UAAD,EAAgB;AAChF1C,oBAAIW,MAAJ,yBAA2BI,IAA3B,CAAgC,4BAAc,EAAd,+BAAhC;AACH,aAFD,EAEGS,KAFH,CAES,UAACC,CAAD,EAAO;AAAEzB,oBAAIW,MAAJ,6BAA+BI,IAA/B,CAAoC,0BAAYU,CAAZ,CAApC;AAAqD,aAFvE;AAGH,S,QAGDoB,W,GAAc,UAAC9C,GAAD,EAAMC,GAAN,EAAc;AAAA,gBAClBqB,YADkB,GACDtB,IAAI6C,OADH,CAClBvB,YADkB;AAAA,6BAEgDtB,IAAII,IAFpD;AAAA,gBAElB2C,SAFkB,cAElBA,SAFkB;AAAA,gBAEPC,UAFO,cAEPA,UAFO;AAAA,gBAEKC,GAFL,cAEKA,GAFL;AAAA,gBAEUC,GAFV,cAEUA,GAFV;AAAA,gBAEeC,QAFf,cAEeA,QAFf;AAAA,gBAEyBC,SAFzB,cAEyBA,SAFzB;AAAA,gBAEoCC,OAFpC,cAEoCA,OAFpC;;AAGxB,gBAAI1C,OAAOX,IAAIsD,IAAJ,GAAW,yBAAatD,IAAIsD,IAAjB,CAAX,GAAoC3C,OAAO,EAAtD;AACA,gBAAIT,YAAYF,IAAIG,IAApB;AACA,gBAAIoD,eAAe,yBAAW,EAAER,oBAAF,EAAaC,sBAAb,EAAyBC,QAAzB,EAA8BC,QAA9B,EAAmCC,kBAAnC,EAA6CC,oBAA7C,EAAwDC,gBAAxD,EAAX,CAAnB;AACAE,2BAAe,iBAAEtC,KAAF,CAAQN,IAAR,EAAc4C,YAAd,CAAf;AACA,2BAAKzB,MAAL,CAAY5B,SAAZ,EAAuB,EAAEoB,0BAAF,EAAvB,EAAyCiC,YAAzC,EAAuDzC,IAAvD,CAA4D,UAACC,MAAD,EAAY;AACpEd,oBAAIW,MAAJ,yBAA2BI,IAA3B,CAAgC,4BAAcD,MAAd,CAAhC;AACH,aAFD,EAEGU,KAFH,CAES,UAACC,CAAD,EAAO;AACZ,yCAAa1B,IAAIwD,WAAjB;AACAvD,oBAAIW,MAAJ,6BAA+BI,IAA/B,CAAoC,0BAAYU,CAAZ,CAApC;AACH,aALD;AAMH,S;;;AAtID;;;AA4BA;;;AAwBA;;;AAsBA;;;AAkBA;;;AAmBA;;;AASA;;;;;;AAkBJ,IAAM+B,aAAa,IAAI3D,cAAJ,EAAnB;kBACe2D,U","file":"user.js","sourcesContent":["import BaseAPIController from \"./BaseAPIController\";\nimport User from \"../models/User.js\";\nimport generatePassword from 'password-generator';\nimport config from \"../../config.json\";\nimport { successResult, verifyData, encodePassword, encodeEmail, serverError, mergeArray, countryCode, generateRandomString, validate, parameterMissing } from \"../modules/generic\";\nimport twilio from \"../modules/twilio\";\nimport mail from \"../modules/mail\";\nimport constant from \"../models/constant\";\nimport { encodeToken } from \"../modules/token\";\nimport async from \"async\";\nimport _ from \"lodash\";\nimport { PARAMETER_MISSING_STATUS, INVALID_CREDENTIAL, BAD_REQUEST_STATUS, ALREADY_EXIST, SUCCESS_STATUS } from '../constant/status';\nimport { USERNAME_EXIST, INVALID_ARRAY, INVALID_LOGIN_TYPE, INVALID_LOGIN_MESSAGE, USER_EXIST, LOGIN_SUCCESSFULLY_MESSAGE, MOBILE_NUMBER_MESSAGE, OTP_MATCHED, INVALID_VERIFICATION_CODE, USER_LOGOUT_MESSAGE, PASSWORD_CHANGE_MESSAGE, INVALID_MOBILE_EMAIL, OTP_SENT, VERIFICATION_MESSAGE } from '../constant/message';\nimport { DELETE_IMAGE, DEFAULT_FILE } from \"../modules/image\";\nimport jwt from \"jsonwebtoken\";\n\nexport class UserController extends BaseAPIController {\n\n    /*Controller for create User*/\n    create = (req, res) => {\n        const UserModel = req.User;\n        let { first_name, last_name, email, password, phone_number, country_code } = req.body;\n        let data = validate({ first_name, last_name, email, password });\n        if (data.status) {\n            User.findOne(UserModel, { email }).then((result) => {\n                if (result) {\n                    res.status(ALREADY_EXIST).json(parameterMissing(USER_EXIST));\n                } else {\n                    data = _.merge(data.data, verifyData({ phone_number, country_code }));\n                    data.password = encodePassword(password);\n                    data.date_created = new Date();\n                    data.timestamp = new Date().getTime();\n                    let access_token = encodeToken(email);\n                    data.access_token = access_token;\n                    User.save(UserModel, data).then((response) => {\n                        res.status(SUCCESS_STATUS).json(successResult({ email, access_token }));\n                    });\n                }\n            }).catch((e) => {\n                res.status(BAD_REQUEST_STATUS).json(serverError(e));\n            });\n        } else {\n            res.status(PARAMETER_MISSING_STATUS).json(parameterMissing(data.data))\n        }\n    }\n\n    /* Controller for User Login  */\n    login = (req, res) => {\n        let { email, password } = req.body;\n        let data = validate({ email, password });\n        if (data.status) {\n            data = data.data;\n            let UserModel = req.User;\n            data.password = encodePassword(password);\n            User.findOne(UserModel, data).then((user) => {\n                if (user) {\n                    let access_token = encodeToken(user._id)\n                    User.update(UserModel, data, { access_token }).then((result) => {\n                        res.status(SUCCESS_STATUS).json(successResult(result, LOGIN_SUCCESSFULLY_MESSAGE))\n                    }).catch((e) => { res.status(BAD_REQUEST_STATUS).json(serverError(e)); });\n                } else {\n                    res.status(PARAMETER_MISSING_STATUS).json(parameterMissing(INVALID_LOGIN_MESSAGE));\n                }\n            }).catch((e) => { res.status(BAD_REQUEST_STATUS).json(serverError(e)); });\n        } else {\n            res.status(INVALID_CREDENTIAL).json(parameterMissing(data.data));\n        }\n    }\n\n\n    /*Controller for forgot password*/\n    forgotPassword = (req, res) => {\n        let { email } = req.body;\n        const UserModel = req.User;\n        if (email) {\n            User.findOne(UserModel, { email }).then((user) => {\n                if (!user) {\n                    res.status(PARAMETER_MISSING_STATUS).json(parameterMissing(INVALID_MOBILE_EMAIL));\n                } else {\n                    let href = 'https://www.google.co.in/?gfe_rd=cr&dcr=0&ei=PNanWaC7Bcf08weuzJ7oBQ'\n                    let html = `<!DOCTYPE html><html><head><title>Page Title</title></head><body><h1>Please verify your email address</h1><p><pre>Hi,<br>Please verify your email address so we know that it's really you!.</pre></p><a style=\"font-size:16px;font-family:Helvetica,Helvetica neue,Arial,Verdana,sans-serif;font-weight:none;color:#ffffff;text-decoration:none;background-color:#3572b0;border-top:11px solid #3572b0;border-bottom:11px solid #3572b0;border-left:20px solid #3572b0;border-right:20px solid #3572b0;border-radius:5px;display:inline-block\" class=\"m_-96280054845025976mobile-button\" shape=\"rect\" href=${href} target=\"_blank\"><span class=\"il\">Verify</span> my email address</a><pre>Happy working,The ReadFry Crew</pre></body></html>`\n                    mail.sendMail(email, constant().nodeMailer.subject, constant().nodeMailer.text, config.nodeMailer_email, html)\n                        .then((mailsent) => {\n                            res.status(SUCCESS_STATUS).json(successResult({ email, access_token }, OTP_SENT))\n                        }).catch((e) => { res.status(BAD_REQUEST_STATUS).json(serverError(e)); });\n                }\n            }).catch((e) => { res.status(BAD_REQUEST_STATUS).json(serverError(e)); });\n        } else {\n            res.status(PARAMETER_MISSING_STATUS).json(parameterMissing())\n        }\n    }\n\n    /*Controller for verify email*/\n    verifyEmail = (req, res) => {\n        let { email, verification_code } = req.body;\n        const UserModel = req.User;\n        if (email) {\n            User.findOne(UserModel, { email, verification_code }).then((user) => {\n                if (!user) {\n                    res.status(PARAMETER_MISSING_STATUS).json(parameterMissing(INVALID_MOBILE_EMAIL));\n                } else {\n                    res.status(SUCCESS_STATUS).json(successResult({ access_token }))\n\n                }\n            }).catch((e) => { res.status(BAD_REQUEST_STATUS).json(serverError(e)); });\n        } else {\n            res.status(PARAMETER_MISSING_STATUS).json(parameterMissing())\n        }\n    }\n\n    /*Controller for reset password*/\n    resetPassword = (req, res) => {\n        let UserModel = req.User;\n        let { email, password } = req.body;\n        let data = validate({ email, password });\n        if (data.status) {\n            data = data.data;\n            User.update(UserModel, data, { password: encodePassword(password) }).then((insertData) => {\n                if (insertData) {\n                    res.status(SUCCESS_STATUS).json(successResult({}, PASSWORD_CHANGE_MESSAGE))\n                } else {\n                    res.status(PARAMETER_MISSING_STATUS).json(parameterMissing(INVALID_MOBILE_EMAIL))\n                }\n            }).catch((e) => { res.status(BAD_REQUEST_STATUS).json(serverError(e)) });\n        } else {\n            res.status(PARAMETER_MISSING_STATUS).json(parameterMissing(data.data))\n        }\n    }\n\n    /*Controller for logout*/\n    logout = (req, res) => {\n        let { access_token } = req.headers;\n        let UserModel = req.User;\n        User.update(UserModel, { access_token }, { access_token: '' }).then((insertData) => {\n            res.status(SUCCESS_STATUS).json(successResult({}, USER_LOGOUT_MESSAGE))\n        }).catch((e) => { res.status(BAD_REQUEST_STATUS).json(serverError(e)) });\n    }\n\n    /*Controller for upload image and edit profile*/\n    editProfile = (req, res) => {\n        let { access_token } = req.headers;\n        let { full_name, profession, dob, bio, latitude, longitude, address } = req.body;\n        let data = req.file ? DEFAULT_FILE(req.file) : data = {};\n        let UserModel = req.User;\n        let verifiedData = verifyData({ full_name, profession, dob, bio, latitude, longitude, address })\n        verifiedData = _.merge(data, verifiedData)\n        User.update(UserModel, { access_token }, verifiedData).then((result) => {\n            res.status(SUCCESS_STATUS).json(successResult(result))\n        }).catch((e) => {\n            DELETE_IMAGE(req.actual_path);\n            res.status(BAD_REQUEST_STATUS).json(serverError(e));\n        });\n    }\n\n}\n\nconst controller = new UserController();\nexport default controller;"]}